// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/nnieie/golanglab5/cmd/api/biz/handler/mw/jwt"
	api "github.com/nnieie/golanglab5/cmd/api/biz/model/api"
	"github.com/nnieie/golanglab5/cmd/api/pack"
	"github.com/nnieie/golanglab5/cmd/api/rpc"
	"github.com/nnieie/golanglab5/kitex_gen/social"
)

// FollowAction .
// @router /relation/action [POST]
func FollowAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FollowActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.FollowActionResponse)

	UserID, err := jwt.ExtractUserID(c)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	rpcResp, err := rpc.FollowAction(ctx, &social.FollowActionRequest{
		UserId:     UserID,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)

	c.JSON(consts.StatusOK, resp)
}

// GetFollowList .
// @router /following/list [GET]
func GetFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetFollowListResponse)

	FollowList, err := rpc.GetFollowingList(ctx, &social.QueryFollowListRequest{
		UserId:   req.UserID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	resp.Base = pack.BaseRespRPCToBaseResp(FollowList.Base)
	resp.Data = pack.UsersRPCToUsers(FollowList.Data)

	c.JSON(consts.StatusOK, resp)
}

// GetFansList .
// @router /follower/list [GET]
func GetFansList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFansListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetFansListResponse)

	FollowerList, err := rpc.GetFollowerList(ctx, &social.QueryFollowerListRequest{
		UserId:   req.UserID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	resp.Base = pack.BaseRespRPCToBaseResp(FollowerList.Base)
	resp.Data = pack.UsersRPCToUsers(FollowerList.Data)

	c.JSON(consts.StatusOK, resp)
}

// GetFriendList .
// @router /friends/list [GET]
func GetFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetFriendListResponse)

	UserID, err := jwt.ExtractUserID(c)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	FriendList, err := rpc.GetFriendList(ctx, &social.QueryFriendListRequest{
		UserId:   UserID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	resp.Base = pack.BaseRespRPCToBaseResp(FriendList.Base)
	resp.Data = pack.UsersRPCToUsers(FriendList.Data)

	c.JSON(consts.StatusOK, resp)
}

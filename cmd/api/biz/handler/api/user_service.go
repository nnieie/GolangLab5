// Code generated by hertz generator.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/nnieie/golanglab5/cmd/api/biz/handler/mw/jwt"
	api "github.com/nnieie/golanglab5/cmd/api/biz/model/api"
	"github.com/nnieie/golanglab5/cmd/api/biz/model/base"
	"github.com/nnieie/golanglab5/cmd/api/pack"
	"github.com/nnieie/golanglab5/cmd/api/rpc"
	"github.com/nnieie/golanglab5/kitex_gen/user"
	"github.com/nnieie/golanglab5/pkg/constants"
	"github.com/nnieie/golanglab5/pkg/errno"
	"github.com/nnieie/golanglab5/pkg/logger"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResponse)

	rpcResp, err := rpc.UserRegister(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	accessToken, _, _ := jwt.AccessTokenJwtMiddleware.TokenGenerator(&base.User{
		ID: *rpcResp.UserId,
	})
	refreshToken, _, _ := jwt.RefreshTokenJwtMiddleware.TokenGenerator(&base.User{
		ID: *rpcResp.UserId,
	})

	// 将 Token 设置为 HttpOnly Cookie
	c.SetCookie("access_token", accessToken, 3600, "/", "", protocol.CookieSameSiteLaxMode, true, true)
	c.SetCookie("refresh_token", refreshToken, 3600*24*7, "/", "", protocol.CookieSameSiteLaxMode, true, true)

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.LoginResponse)

	logger.Debugf("Login request(api): username=%s, password=%s, code=%v", req.Username, req.Password, req.Code)

	rpcResp, err := rpc.UserLogin(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
		MFAcode:  req.Code,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Data = pack.UserRPCToUser(rpcResp.Data)

	accessToken, _, _ := jwt.AccessTokenJwtMiddleware.TokenGenerator(&base.User{
		ID: rpcResp.Data.Id,
	})
	refreshToken, _, _ := jwt.RefreshTokenJwtMiddleware.TokenGenerator(&base.User{
		ID: rpcResp.Data.Id,
	})

	// 将 Token 设置为 HttpOnly Cookie
	c.SetCookie("access_token", accessToken, 3600, "/", "", protocol.CookieSameSiteLaxMode, true, true)
	c.SetCookie("refresh_token", refreshToken, 3600*24*7, "/", "", protocol.CookieSameSiteLaxMode, true, true)

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetUserInfoResponse)

	rpcResp, err := rpc.GetUserInfo(ctx, &user.UserInfoRequest{
		UserId: req.UserID,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Data = pack.UserRPCToUser(rpcResp.Data)

	c.JSON(consts.StatusOK, resp)
}

// UploadAvatar .
// @router /user/avatar/upload [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UploadAvatarRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UploadAvatarResponse)

	UserID, err := jwt.ExtractUserID(c)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	// 获取上传的文件
	file, err := c.FormFile("data")
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	openedFile, err := file.Open()
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}
	defer openedFile.Close()

	// 读取前512字节用于验证文件类型
	header := make([]byte, 512)
	if _, err := openedFile.Read(header); err != nil {
		pack.SendErrResp(c, err)
		return
	}
	contentType := http.DetectContentType(header)
	if contentType != "image/jpeg" && contentType != "image/png" && contentType != "image/webp" {
		pack.SendErrResp(c, errno.InvalidFileTypeErr)
		return
	}

	// 把header恢复回去并限制整体读取大小
	reader := io.MultiReader(bytes.NewReader(header), io.LimitReader(openedFile, constants.MaxAvatarSize))

	// 把内容读到buffer
	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, reader); err != nil {
		pack.SendErrResp(c, err)
		return
	}

	rpcResp, err := rpc.UserAvatar(ctx, &user.UploadAvatarRequest{
		UserId:   UserID,
		Data:     buf.Bytes(),
		FileName: file.Filename,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Data = pack.UserRPCToUser(rpcResp.Data)

	c.JSON(consts.StatusOK, resp)
}

// GetMFA .
// @router /auth/mfa/qrcode [GET]
func GetMFA(ctx context.Context, c *app.RequestContext) {
	var err error

	resp := new(api.GetMFAResponse)

	UserID, err := jwt.ExtractUserID(c)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	rpcResp, err := rpc.GetMFAQrcode(ctx, &user.GetMFAQrcodeRequest{
		UserId: UserID,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Data = &base.MFAQrcode{
		Secret: rpcResp.Data.Secret,
		Qrcode: rpcResp.Data.Qrcode,
	}

	c.JSON(consts.StatusOK, resp)
}

// MFABind .
// @router /auth/mfa/bind [POST]
func MFABind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MFABindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.MFABindResponse)

	UserID, err := jwt.ExtractUserID(c)
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	rpcResp, err := rpc.BindMFA(ctx, &user.MFABindRequest{
		UserId: UserID,
		Code:   req.Code,
		Secret: req.Secret,
	})
	if err != nil {
		pack.SendErrResp(c, err)
		return
	}

	resp.Base = pack.BaseRespRPCToBaseResp(rpcResp.Base)
	if resp.Base.Code != errno.SuccessCode {
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RefreshToken .
// @router /user/token/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	userID, exists := c.Get(constants.IdentityKey)
	if !exists {
		c.JSON(consts.StatusUnauthorized, errno.AuthorizationFailedErr)
		return
	}
	newAccessToken, _, err := jwt.AccessTokenJwtMiddleware.TokenGenerator(&base.User{
		ID: userID.(int64),
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err)
		return
	}

	c.SetCookie("access_token", newAccessToken, 3600, "/", "", protocol.CookieSameSiteLaxMode, true, true)

	c.JSON(consts.StatusOK, map[string]interface{}{
		"new_access_token": newAccessToken,
	})
}

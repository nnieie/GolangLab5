// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package base

import (
	"fmt"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type User struct {
	Id        int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Username  string `thrift:"username,2" frugal:"2,default,string" json:"username"`
	AvatarUrl string `thrift:"avatar_url,3" frugal:"3,default,string" json:"avatar_url"`
	CreatedAt string `thrift:"created_at,4" frugal:"4,default,string" json:"created_at"`
	UpdatedAt string `thrift:"updated_at,5" frugal:"5,default,string" json:"updated_at"`
	DeletedAt string `thrift:"deleted_at,6" frugal:"6,default,string" json:"deleted_at"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v int64) {
	return p.Id
}

func (p *User) GetUsername() (v string) {
	return p.Username
}

func (p *User) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *User) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *User) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *User) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *User) SetId(val int64) {
	p.Id = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}
func (p *User) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *User) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *User) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "id",
	2: "username",
	3: "avatar_url",
	4: "created_at",
	5: "updated_at",
	6: "deleted_at",
}

type Video struct {
	Id           int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId       int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoUrl     string `thrift:"video_url,3" frugal:"3,default,string" json:"video_url"`
	CoverUrl     string `thrift:"cover_url,4" frugal:"4,default,string" json:"cover_url"`
	Title        string `thrift:"title,5" frugal:"5,default,string" json:"title"`
	Description  string `thrift:"description,6" frugal:"6,default,string" json:"description"`
	VisitCount   int64  `thrift:"visit_count,7" frugal:"7,default,i64" json:"visit_count"`
	LikeCount    int64  `thrift:"like_count,8" frugal:"8,default,i64" json:"like_count"`
	CommentCount int64  `thrift:"comment_count,9" frugal:"9,default,i64" json:"comment_count"`
	CreatedAt    string `thrift:"created_at,10" frugal:"10,default,string" json:"created_at"`
	UpdatedAt    string `thrift:"updated_at,11" frugal:"11,default,string" json:"updated_at"`
	DeletedAt    string `thrift:"deleted_at,12" frugal:"12,default,string" json:"deleted_at"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetId() (v int64) {
	return p.Id
}

func (p *Video) GetUserId() (v int64) {
	return p.UserId
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetCoverUrl() (v string) {
	return p.CoverUrl
}

func (p *Video) GetTitle() (v string) {
	return p.Title
}

func (p *Video) GetDescription() (v string) {
	return p.Description
}

func (p *Video) GetVisitCount() (v int64) {
	return p.VisitCount
}

func (p *Video) GetLikeCount() (v int64) {
	return p.LikeCount
}

func (p *Video) GetCommentCount() (v int64) {
	return p.CommentCount
}

func (p *Video) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Video) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Video) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *Video) SetId(val int64) {
	p.Id = val
}
func (p *Video) SetUserId(val int64) {
	p.UserId = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetCoverUrl(val string) {
	p.CoverUrl = val
}
func (p *Video) SetTitle(val string) {
	p.Title = val
}
func (p *Video) SetDescription(val string) {
	p.Description = val
}
func (p *Video) SetVisitCount(val int64) {
	p.VisitCount = val
}
func (p *Video) SetLikeCount(val int64) {
	p.LikeCount = val
}
func (p *Video) SetCommentCount(val int64) {
	p.CommentCount = val
}
func (p *Video) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Video) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Video) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

var fieldIDToName_Video = map[int16]string{
	1:  "id",
	2:  "user_id",
	3:  "video_url",
	4:  "cover_url",
	5:  "title",
	6:  "description",
	7:  "visit_count",
	8:  "like_count",
	9:  "comment_count",
	10: "created_at",
	11: "updated_at",
	12: "deleted_at",
}

type Comment struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId     int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	VideoId    int64  `thrift:"video_id,3" frugal:"3,default,i64" json:"video_id"`
	ParentId   int64  `thrift:"parent_id,4" frugal:"4,default,i64" json:"parent_id"`
	LikeCount  int64  `thrift:"like_count,5" frugal:"5,default,i64" json:"like_count"`
	ChildCount int64  `thrift:"child_count,6" frugal:"6,default,i64" json:"child_count"`
	Content    string `thrift:"content,7" frugal:"7,default,string" json:"content"`
	CreatedAt  string `thrift:"created_at,8" frugal:"8,default,string" json:"created_at"`
	UpdatedAt  string `thrift:"updated_at,9" frugal:"9,default,string" json:"updated_at"`
	DeletedAt  string `thrift:"deleted_at,10" frugal:"10,default,string" json:"deleted_at"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
}

func (p *Comment) GetId() (v int64) {
	return p.Id
}

func (p *Comment) GetUserId() (v int64) {
	return p.UserId
}

func (p *Comment) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Comment) GetParentId() (v int64) {
	return p.ParentId
}

func (p *Comment) GetLikeCount() (v int64) {
	return p.LikeCount
}

func (p *Comment) GetChildCount() (v int64) {
	return p.ChildCount
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}

func (p *Comment) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Comment) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Comment) GetDeletedAt() (v string) {
	return p.DeletedAt
}
func (p *Comment) SetId(val int64) {
	p.Id = val
}
func (p *Comment) SetUserId(val int64) {
	p.UserId = val
}
func (p *Comment) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Comment) SetParentId(val int64) {
	p.ParentId = val
}
func (p *Comment) SetLikeCount(val int64) {
	p.LikeCount = val
}
func (p *Comment) SetChildCount(val int64) {
	p.ChildCount = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}
func (p *Comment) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Comment) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Comment) SetDeletedAt(val string) {
	p.DeletedAt = val
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

var fieldIDToName_Comment = map[int16]string{
	1:  "id",
	2:  "user_id",
	3:  "video_id",
	4:  "parent_id",
	5:  "like_count",
	6:  "child_count",
	7:  "content",
	8:  "created_at",
	9:  "updated_at",
	10: "deleted_at",
}

type PrivateMessage struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	FromUserId int64  `thrift:"from_user_id,2" frugal:"2,default,i64" json:"from_user_id"`
	ToUserId   int64  `thrift:"to_user_id,3" frugal:"3,default,i64" json:"to_user_id"`
	Content    string `thrift:"content,4" frugal:"4,default,string" json:"content"`
	CreatedAt  int64  `thrift:"created_at,5" frugal:"5,default,i64" json:"created_at"`
}

func NewPrivateMessage() *PrivateMessage {
	return &PrivateMessage{}
}

func (p *PrivateMessage) InitDefault() {
}

func (p *PrivateMessage) GetId() (v int64) {
	return p.Id
}

func (p *PrivateMessage) GetFromUserId() (v int64) {
	return p.FromUserId
}

func (p *PrivateMessage) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *PrivateMessage) GetContent() (v string) {
	return p.Content
}

func (p *PrivateMessage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *PrivateMessage) SetId(val int64) {
	p.Id = val
}
func (p *PrivateMessage) SetFromUserId(val int64) {
	p.FromUserId = val
}
func (p *PrivateMessage) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *PrivateMessage) SetContent(val string) {
	p.Content = val
}
func (p *PrivateMessage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *PrivateMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivateMessage(%+v)", *p)
}

var fieldIDToName_PrivateMessage = map[int16]string{
	1: "id",
	2: "from_user_id",
	3: "to_user_id",
	4: "content",
	5: "created_at",
}

type GroupMessage struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	FromUserId int64  `thrift:"from_user_id,2" frugal:"2,default,i64" json:"from_user_id"`
	GroupId    int64  `thrift:"group_id,3" frugal:"3,default,i64" json:"group_id"`
	Content    string `thrift:"content,4" frugal:"4,default,string" json:"content"`
	CreatedAt  int64  `thrift:"created_at,5" frugal:"5,default,i64" json:"created_at"`
}

func NewGroupMessage() *GroupMessage {
	return &GroupMessage{}
}

func (p *GroupMessage) InitDefault() {
}

func (p *GroupMessage) GetId() (v int64) {
	return p.Id
}

func (p *GroupMessage) GetFromUserId() (v int64) {
	return p.FromUserId
}

func (p *GroupMessage) GetGroupId() (v int64) {
	return p.GroupId
}

func (p *GroupMessage) GetContent() (v string) {
	return p.Content
}

func (p *GroupMessage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *GroupMessage) SetId(val int64) {
	p.Id = val
}
func (p *GroupMessage) SetFromUserId(val int64) {
	p.FromUserId = val
}
func (p *GroupMessage) SetGroupId(val int64) {
	p.GroupId = val
}
func (p *GroupMessage) SetContent(val string) {
	p.Content = val
}
func (p *GroupMessage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *GroupMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMessage(%+v)", *p)
}

var fieldIDToName_GroupMessage = map[int16]string{
	1: "id",
	2: "from_user_id",
	3: "group_id",
	4: "content",
	5: "created_at",
}

type MFAQrcode struct {
	Secret string `thrift:"secret,1" frugal:"1,default,string" json:"secret"`
	Qrcode string `thrift:"qrcode,2" frugal:"2,default,string" json:"qrcode"`
}

func NewMFAQrcode() *MFAQrcode {
	return &MFAQrcode{}
}

func (p *MFAQrcode) InitDefault() {
}

func (p *MFAQrcode) GetSecret() (v string) {
	return p.Secret
}

func (p *MFAQrcode) GetQrcode() (v string) {
	return p.Qrcode
}
func (p *MFAQrcode) SetSecret(val string) {
	p.Secret = val
}
func (p *MFAQrcode) SetQrcode(val string) {
	p.Qrcode = val
}

func (p *MFAQrcode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MFAQrcode(%+v)", *p)
}

var fieldIDToName_MFAQrcode = map[int16]string{
	1: "secret",
	2: "qrcode",
}

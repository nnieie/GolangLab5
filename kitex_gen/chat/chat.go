// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package chat

import (
	"context"
	"fmt"
	"github.com/nnieie/golanglab5/kitex_gen/base"
)

type SendMessageRequest struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	UserId     int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	ToUserId   int64  `thrift:"to_user_id,3" frugal:"3,default,i64" json:"to_user_id"`
	GroupId    int64  `thrift:"group_id,4" frugal:"4,default,i64" json:"group_id"`
	Type       int64  `thrift:"type,5" frugal:"5,default,i64" json:"type"`
	Content    string `thrift:"content,6" frugal:"6,default,string" json:"content"`
	CreateTime int64  `thrift:"create_time,7" frugal:"7,default,i64" json:"create_time"`
}

func NewSendMessageRequest() *SendMessageRequest {
	return &SendMessageRequest{}
}

func (p *SendMessageRequest) InitDefault() {
}

func (p *SendMessageRequest) GetId() (v int64) {
	return p.Id
}

func (p *SendMessageRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SendMessageRequest) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *SendMessageRequest) GetGroupId() (v int64) {
	return p.GroupId
}

func (p *SendMessageRequest) GetType() (v int64) {
	return p.Type
}

func (p *SendMessageRequest) GetContent() (v string) {
	return p.Content
}

func (p *SendMessageRequest) GetCreateTime() (v int64) {
	return p.CreateTime
}
func (p *SendMessageRequest) SetId(val int64) {
	p.Id = val
}
func (p *SendMessageRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SendMessageRequest) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *SendMessageRequest) SetGroupId(val int64) {
	p.GroupId = val
}
func (p *SendMessageRequest) SetType(val int64) {
	p.Type = val
}
func (p *SendMessageRequest) SetContent(val string) {
	p.Content = val
}
func (p *SendMessageRequest) SetCreateTime(val int64) {
	p.CreateTime = val
}

func (p *SendMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageRequest(%+v)", *p)
}

var fieldIDToName_SendMessageRequest = map[int16]string{
	1: "id",
	2: "user_id",
	3: "to_user_id",
	4: "group_id",
	5: "type",
	6: "content",
	7: "create_time",
}

type SendMessageResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewSendMessageResponse() *SendMessageResponse {
	return &SendMessageResponse{}
}

func (p *SendMessageResponse) InitDefault() {
}

var SendMessageResponse_Base_DEFAULT *base.BaseResp

func (p *SendMessageResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return SendMessageResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SendMessageResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *SendMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SendMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMessageResponse(%+v)", *p)
}

var fieldIDToName_SendMessageResponse = map[int16]string{
	1: "base",
}

type QueryPrivateOfflineMessageRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewQueryPrivateOfflineMessageRequest() *QueryPrivateOfflineMessageRequest {
	return &QueryPrivateOfflineMessageRequest{}
}

func (p *QueryPrivateOfflineMessageRequest) InitDefault() {
}

func (p *QueryPrivateOfflineMessageRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *QueryPrivateOfflineMessageRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *QueryPrivateOfflineMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivateOfflineMessageRequest(%+v)", *p)
}

var fieldIDToName_QueryPrivateOfflineMessageRequest = map[int16]string{
	1: "user_id",
}

type QueryPrivateOfflineMessageResponse struct {
	Base *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Message `thrift:"data,2,optional" frugal:"2,optional,list<base.Message>" json:"data,omitempty"`
}

func NewQueryPrivateOfflineMessageResponse() *QueryPrivateOfflineMessageResponse {
	return &QueryPrivateOfflineMessageResponse{}
}

func (p *QueryPrivateOfflineMessageResponse) InitDefault() {
}

var QueryPrivateOfflineMessageResponse_Base_DEFAULT *base.BaseResp

func (p *QueryPrivateOfflineMessageResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryPrivateOfflineMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryPrivateOfflineMessageResponse_Data_DEFAULT []*base.Message

func (p *QueryPrivateOfflineMessageResponse) GetData() (v []*base.Message) {
	if !p.IsSetData() {
		return QueryPrivateOfflineMessageResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *QueryPrivateOfflineMessageResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryPrivateOfflineMessageResponse) SetData(val []*base.Message) {
	p.Data = val
}

func (p *QueryPrivateOfflineMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryPrivateOfflineMessageResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryPrivateOfflineMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivateOfflineMessageResponse(%+v)", *p)
}

var fieldIDToName_QueryPrivateOfflineMessageResponse = map[int16]string{
	1: "base",
	2: "data",
}

type QueryPrivateHistoryMessageRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToId     int64 `thrift:"to_id,2" frugal:"2,default,i64" json:"to_id"`
	PageNum  int64 `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
}

func NewQueryPrivateHistoryMessageRequest() *QueryPrivateHistoryMessageRequest {
	return &QueryPrivateHistoryMessageRequest{}
}

func (p *QueryPrivateHistoryMessageRequest) InitDefault() {
}

func (p *QueryPrivateHistoryMessageRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QueryPrivateHistoryMessageRequest) GetToId() (v int64) {
	return p.ToId
}

func (p *QueryPrivateHistoryMessageRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryPrivateHistoryMessageRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *QueryPrivateHistoryMessageRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QueryPrivateHistoryMessageRequest) SetToId(val int64) {
	p.ToId = val
}
func (p *QueryPrivateHistoryMessageRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryPrivateHistoryMessageRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *QueryPrivateHistoryMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivateHistoryMessageRequest(%+v)", *p)
}

var fieldIDToName_QueryPrivateHistoryMessageRequest = map[int16]string{
	1: "user_id",
	2: "to_id",
	3: "page_num",
	4: "page_size",
}

type QueryPrivateHistoryMessageResponse struct {
	Base *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Message `thrift:"data,2,optional" frugal:"2,optional,list<base.Message>" json:"data,omitempty"`
}

func NewQueryPrivateHistoryMessageResponse() *QueryPrivateHistoryMessageResponse {
	return &QueryPrivateHistoryMessageResponse{}
}

func (p *QueryPrivateHistoryMessageResponse) InitDefault() {
}

var QueryPrivateHistoryMessageResponse_Base_DEFAULT *base.BaseResp

func (p *QueryPrivateHistoryMessageResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryPrivateHistoryMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryPrivateHistoryMessageResponse_Data_DEFAULT []*base.Message

func (p *QueryPrivateHistoryMessageResponse) GetData() (v []*base.Message) {
	if !p.IsSetData() {
		return QueryPrivateHistoryMessageResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *QueryPrivateHistoryMessageResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryPrivateHistoryMessageResponse) SetData(val []*base.Message) {
	p.Data = val
}

func (p *QueryPrivateHistoryMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryPrivateHistoryMessageResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryPrivateHistoryMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryPrivateHistoryMessageResponse(%+v)", *p)
}

var fieldIDToName_QueryPrivateHistoryMessageResponse = map[int16]string{
	1: "base",
	2: "data",
}

type QueryGroupHistoryMessageRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	ToId     int64 `thrift:"to_id,2" frugal:"2,default,i64" json:"to_id"`
	PageNum  int64 `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
}

func NewQueryGroupHistoryMessageRequest() *QueryGroupHistoryMessageRequest {
	return &QueryGroupHistoryMessageRequest{}
}

func (p *QueryGroupHistoryMessageRequest) InitDefault() {
}

func (p *QueryGroupHistoryMessageRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QueryGroupHistoryMessageRequest) GetToId() (v int64) {
	return p.ToId
}

func (p *QueryGroupHistoryMessageRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryGroupHistoryMessageRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *QueryGroupHistoryMessageRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QueryGroupHistoryMessageRequest) SetToId(val int64) {
	p.ToId = val
}
func (p *QueryGroupHistoryMessageRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryGroupHistoryMessageRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *QueryGroupHistoryMessageRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryGroupHistoryMessageRequest(%+v)", *p)
}

var fieldIDToName_QueryGroupHistoryMessageRequest = map[int16]string{
	1: "user_id",
	2: "to_id",
	3: "page_num",
	4: "page_size",
}

type QueryGroupHistoryMessageResponse struct {
	Base *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Message `thrift:"data,2,optional" frugal:"2,optional,list<base.Message>" json:"data,omitempty"`
}

func NewQueryGroupHistoryMessageResponse() *QueryGroupHistoryMessageResponse {
	return &QueryGroupHistoryMessageResponse{}
}

func (p *QueryGroupHistoryMessageResponse) InitDefault() {
}

var QueryGroupHistoryMessageResponse_Base_DEFAULT *base.BaseResp

func (p *QueryGroupHistoryMessageResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryGroupHistoryMessageResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryGroupHistoryMessageResponse_Data_DEFAULT []*base.Message

func (p *QueryGroupHistoryMessageResponse) GetData() (v []*base.Message) {
	if !p.IsSetData() {
		return QueryGroupHistoryMessageResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *QueryGroupHistoryMessageResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryGroupHistoryMessageResponse) SetData(val []*base.Message) {
	p.Data = val
}

func (p *QueryGroupHistoryMessageResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryGroupHistoryMessageResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryGroupHistoryMessageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryGroupHistoryMessageResponse(%+v)", *p)
}

var fieldIDToName_QueryGroupHistoryMessageResponse = map[int16]string{
	1: "base",
	2: "data",
}

type ChatService interface {
	SendMessage(ctx context.Context, req *SendMessageRequest) (r *SendMessageResponse, err error)

	QueryPrivateOfflineMessage(ctx context.Context, req *QueryPrivateOfflineMessageRequest) (r *QueryPrivateOfflineMessageResponse, err error)

	QueryPrivateHistoryMessage(ctx context.Context, req *QueryPrivateHistoryMessageRequest) (r *QueryPrivateHistoryMessageResponse, err error)

	QueryGroupHistoryMessage(ctx context.Context, req *QueryGroupHistoryMessageRequest) (r *QueryGroupHistoryMessageResponse, err error)
}

type ChatServiceSendMessageArgs struct {
	Req *SendMessageRequest `thrift:"req,1" frugal:"1,default,SendMessageRequest" json:"req"`
}

func NewChatServiceSendMessageArgs() *ChatServiceSendMessageArgs {
	return &ChatServiceSendMessageArgs{}
}

func (p *ChatServiceSendMessageArgs) InitDefault() {
}

var ChatServiceSendMessageArgs_Req_DEFAULT *SendMessageRequest

func (p *ChatServiceSendMessageArgs) GetReq() (v *SendMessageRequest) {
	if !p.IsSetReq() {
		return ChatServiceSendMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceSendMessageArgs) SetReq(val *SendMessageRequest) {
	p.Req = val
}

func (p *ChatServiceSendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceSendMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSendMessageArgs(%+v)", *p)
}

var fieldIDToName_ChatServiceSendMessageArgs = map[int16]string{
	1: "req",
}

type ChatServiceSendMessageResult struct {
	Success *SendMessageResponse `thrift:"success,0,optional" frugal:"0,optional,SendMessageResponse" json:"success,omitempty"`
}

func NewChatServiceSendMessageResult() *ChatServiceSendMessageResult {
	return &ChatServiceSendMessageResult{}
}

func (p *ChatServiceSendMessageResult) InitDefault() {
}

var ChatServiceSendMessageResult_Success_DEFAULT *SendMessageResponse

func (p *ChatServiceSendMessageResult) GetSuccess() (v *SendMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceSendMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceSendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendMessageResponse)
}

func (p *ChatServiceSendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceSendMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceSendMessageResult(%+v)", *p)
}

var fieldIDToName_ChatServiceSendMessageResult = map[int16]string{
	0: "success",
}

type ChatServiceQueryPrivateOfflineMessageArgs struct {
	Req *QueryPrivateOfflineMessageRequest `thrift:"req,1" frugal:"1,default,QueryPrivateOfflineMessageRequest" json:"req"`
}

func NewChatServiceQueryPrivateOfflineMessageArgs() *ChatServiceQueryPrivateOfflineMessageArgs {
	return &ChatServiceQueryPrivateOfflineMessageArgs{}
}

func (p *ChatServiceQueryPrivateOfflineMessageArgs) InitDefault() {
}

var ChatServiceQueryPrivateOfflineMessageArgs_Req_DEFAULT *QueryPrivateOfflineMessageRequest

func (p *ChatServiceQueryPrivateOfflineMessageArgs) GetReq() (v *QueryPrivateOfflineMessageRequest) {
	if !p.IsSetReq() {
		return ChatServiceQueryPrivateOfflineMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceQueryPrivateOfflineMessageArgs) SetReq(val *QueryPrivateOfflineMessageRequest) {
	p.Req = val
}

func (p *ChatServiceQueryPrivateOfflineMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceQueryPrivateOfflineMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryPrivateOfflineMessageArgs(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryPrivateOfflineMessageArgs = map[int16]string{
	1: "req",
}

type ChatServiceQueryPrivateOfflineMessageResult struct {
	Success *QueryPrivateOfflineMessageResponse `thrift:"success,0,optional" frugal:"0,optional,QueryPrivateOfflineMessageResponse" json:"success,omitempty"`
}

func NewChatServiceQueryPrivateOfflineMessageResult() *ChatServiceQueryPrivateOfflineMessageResult {
	return &ChatServiceQueryPrivateOfflineMessageResult{}
}

func (p *ChatServiceQueryPrivateOfflineMessageResult) InitDefault() {
}

var ChatServiceQueryPrivateOfflineMessageResult_Success_DEFAULT *QueryPrivateOfflineMessageResponse

func (p *ChatServiceQueryPrivateOfflineMessageResult) GetSuccess() (v *QueryPrivateOfflineMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceQueryPrivateOfflineMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceQueryPrivateOfflineMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryPrivateOfflineMessageResponse)
}

func (p *ChatServiceQueryPrivateOfflineMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceQueryPrivateOfflineMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryPrivateOfflineMessageResult(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryPrivateOfflineMessageResult = map[int16]string{
	0: "success",
}

type ChatServiceQueryPrivateHistoryMessageArgs struct {
	Req *QueryPrivateHistoryMessageRequest `thrift:"req,1" frugal:"1,default,QueryPrivateHistoryMessageRequest" json:"req"`
}

func NewChatServiceQueryPrivateHistoryMessageArgs() *ChatServiceQueryPrivateHistoryMessageArgs {
	return &ChatServiceQueryPrivateHistoryMessageArgs{}
}

func (p *ChatServiceQueryPrivateHistoryMessageArgs) InitDefault() {
}

var ChatServiceQueryPrivateHistoryMessageArgs_Req_DEFAULT *QueryPrivateHistoryMessageRequest

func (p *ChatServiceQueryPrivateHistoryMessageArgs) GetReq() (v *QueryPrivateHistoryMessageRequest) {
	if !p.IsSetReq() {
		return ChatServiceQueryPrivateHistoryMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceQueryPrivateHistoryMessageArgs) SetReq(val *QueryPrivateHistoryMessageRequest) {
	p.Req = val
}

func (p *ChatServiceQueryPrivateHistoryMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceQueryPrivateHistoryMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryPrivateHistoryMessageArgs(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryPrivateHistoryMessageArgs = map[int16]string{
	1: "req",
}

type ChatServiceQueryPrivateHistoryMessageResult struct {
	Success *QueryPrivateHistoryMessageResponse `thrift:"success,0,optional" frugal:"0,optional,QueryPrivateHistoryMessageResponse" json:"success,omitempty"`
}

func NewChatServiceQueryPrivateHistoryMessageResult() *ChatServiceQueryPrivateHistoryMessageResult {
	return &ChatServiceQueryPrivateHistoryMessageResult{}
}

func (p *ChatServiceQueryPrivateHistoryMessageResult) InitDefault() {
}

var ChatServiceQueryPrivateHistoryMessageResult_Success_DEFAULT *QueryPrivateHistoryMessageResponse

func (p *ChatServiceQueryPrivateHistoryMessageResult) GetSuccess() (v *QueryPrivateHistoryMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceQueryPrivateHistoryMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceQueryPrivateHistoryMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryPrivateHistoryMessageResponse)
}

func (p *ChatServiceQueryPrivateHistoryMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceQueryPrivateHistoryMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryPrivateHistoryMessageResult(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryPrivateHistoryMessageResult = map[int16]string{
	0: "success",
}

type ChatServiceQueryGroupHistoryMessageArgs struct {
	Req *QueryGroupHistoryMessageRequest `thrift:"req,1" frugal:"1,default,QueryGroupHistoryMessageRequest" json:"req"`
}

func NewChatServiceQueryGroupHistoryMessageArgs() *ChatServiceQueryGroupHistoryMessageArgs {
	return &ChatServiceQueryGroupHistoryMessageArgs{}
}

func (p *ChatServiceQueryGroupHistoryMessageArgs) InitDefault() {
}

var ChatServiceQueryGroupHistoryMessageArgs_Req_DEFAULT *QueryGroupHistoryMessageRequest

func (p *ChatServiceQueryGroupHistoryMessageArgs) GetReq() (v *QueryGroupHistoryMessageRequest) {
	if !p.IsSetReq() {
		return ChatServiceQueryGroupHistoryMessageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceQueryGroupHistoryMessageArgs) SetReq(val *QueryGroupHistoryMessageRequest) {
	p.Req = val
}

func (p *ChatServiceQueryGroupHistoryMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceQueryGroupHistoryMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryGroupHistoryMessageArgs(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryGroupHistoryMessageArgs = map[int16]string{
	1: "req",
}

type ChatServiceQueryGroupHistoryMessageResult struct {
	Success *QueryGroupHistoryMessageResponse `thrift:"success,0,optional" frugal:"0,optional,QueryGroupHistoryMessageResponse" json:"success,omitempty"`
}

func NewChatServiceQueryGroupHistoryMessageResult() *ChatServiceQueryGroupHistoryMessageResult {
	return &ChatServiceQueryGroupHistoryMessageResult{}
}

func (p *ChatServiceQueryGroupHistoryMessageResult) InitDefault() {
}

var ChatServiceQueryGroupHistoryMessageResult_Success_DEFAULT *QueryGroupHistoryMessageResponse

func (p *ChatServiceQueryGroupHistoryMessageResult) GetSuccess() (v *QueryGroupHistoryMessageResponse) {
	if !p.IsSetSuccess() {
		return ChatServiceQueryGroupHistoryMessageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceQueryGroupHistoryMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryGroupHistoryMessageResponse)
}

func (p *ChatServiceQueryGroupHistoryMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceQueryGroupHistoryMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceQueryGroupHistoryMessageResult(%+v)", *p)
}

var fieldIDToName_ChatServiceQueryGroupHistoryMessageResult = map[int16]string{
	0: "success",
}

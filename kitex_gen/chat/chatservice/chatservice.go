// Code generated by Kitex v0.15.1. DO NOT EDIT.

package chatservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	chat "github.com/nnieie/golanglab5/kitex_gen/chat"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SendMessage": kitex.NewMethodInfo(
		sendMessageHandler,
		newChatServiceSendMessageArgs,
		newChatServiceSendMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryPrivateOfflineMessage": kitex.NewMethodInfo(
		queryPrivateOfflineMessageHandler,
		newChatServiceQueryPrivateOfflineMessageArgs,
		newChatServiceQueryPrivateOfflineMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryPrivateHistoryMessage": kitex.NewMethodInfo(
		queryPrivateHistoryMessageHandler,
		newChatServiceQueryPrivateHistoryMessageArgs,
		newChatServiceQueryPrivateHistoryMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryGroupHistoryMessage": kitex.NewMethodInfo(
		queryGroupHistoryMessageHandler,
		newChatServiceQueryGroupHistoryMessageArgs,
		newChatServiceQueryGroupHistoryMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	chatServiceServiceInfo                = NewServiceInfo()
	chatServiceServiceInfoForClient       = NewServiceInfoForClient()
	chatServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chatServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chatServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceSendMessageArgs)
	realResult := result.(*chat.ChatServiceSendMessageResult)
	success, err := handler.(chat.ChatService).SendMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceSendMessageArgs() interface{} {
	return chat.NewChatServiceSendMessageArgs()
}

func newChatServiceSendMessageResult() interface{} {
	return chat.NewChatServiceSendMessageResult()
}

func queryPrivateOfflineMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceQueryPrivateOfflineMessageArgs)
	realResult := result.(*chat.ChatServiceQueryPrivateOfflineMessageResult)
	success, err := handler.(chat.ChatService).QueryPrivateOfflineMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceQueryPrivateOfflineMessageArgs() interface{} {
	return chat.NewChatServiceQueryPrivateOfflineMessageArgs()
}

func newChatServiceQueryPrivateOfflineMessageResult() interface{} {
	return chat.NewChatServiceQueryPrivateOfflineMessageResult()
}

func queryPrivateHistoryMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceQueryPrivateHistoryMessageArgs)
	realResult := result.(*chat.ChatServiceQueryPrivateHistoryMessageResult)
	success, err := handler.(chat.ChatService).QueryPrivateHistoryMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceQueryPrivateHistoryMessageArgs() interface{} {
	return chat.NewChatServiceQueryPrivateHistoryMessageArgs()
}

func newChatServiceQueryPrivateHistoryMessageResult() interface{} {
	return chat.NewChatServiceQueryPrivateHistoryMessageResult()
}

func queryGroupHistoryMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceQueryGroupHistoryMessageArgs)
	realResult := result.(*chat.ChatServiceQueryGroupHistoryMessageResult)
	success, err := handler.(chat.ChatService).QueryGroupHistoryMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceQueryGroupHistoryMessageArgs() interface{} {
	return chat.NewChatServiceQueryGroupHistoryMessageArgs()
}

func newChatServiceQueryGroupHistoryMessageResult() interface{} {
	return chat.NewChatServiceQueryGroupHistoryMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, req *chat.SendMessageRequest) (r *chat.SendMessageResponse, err error) {
	var _args chat.ChatServiceSendMessageArgs
	_args.Req = req
	var _result chat.ChatServiceSendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPrivateOfflineMessage(ctx context.Context, req *chat.QueryPrivateOfflineMessageRequest) (r *chat.QueryPrivateOfflineMessageResponse, err error) {
	var _args chat.ChatServiceQueryPrivateOfflineMessageArgs
	_args.Req = req
	var _result chat.ChatServiceQueryPrivateOfflineMessageResult
	if err = p.c.Call(ctx, "QueryPrivateOfflineMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryPrivateHistoryMessage(ctx context.Context, req *chat.QueryPrivateHistoryMessageRequest) (r *chat.QueryPrivateHistoryMessageResponse, err error) {
	var _args chat.ChatServiceQueryPrivateHistoryMessageArgs
	_args.Req = req
	var _result chat.ChatServiceQueryPrivateHistoryMessageResult
	if err = p.c.Call(ctx, "QueryPrivateHistoryMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryGroupHistoryMessage(ctx context.Context, req *chat.QueryGroupHistoryMessageRequest) (r *chat.QueryGroupHistoryMessageResponse, err error) {
	var _args chat.ChatServiceQueryGroupHistoryMessageArgs
	_args.Req = req
	var _result chat.ChatServiceQueryGroupHistoryMessageResult
	if err = p.c.Call(ctx, "QueryGroupHistoryMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.15.1. DO NOT EDIT.

package chatservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	chat "github.com/nnieie/golanglab5/kitex_gen/chat"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendPrivateMessage(ctx context.Context, req *chat.SendPrivateMessageRequest, callOptions ...callopt.Option) (r *chat.SendPrivateMessageResponse, err error)
	QueryPrivateOfflineMessage(ctx context.Context, req *chat.QueryPrivateOfflineMessageRequest, callOptions ...callopt.Option) (r *chat.QueryPrivateOfflineMessageResponse, err error)
	QueryPrivateHistoryMessage(ctx context.Context, req *chat.QueryPrivateHistoryMessageRequest, callOptions ...callopt.Option) (r *chat.QueryPrivateHistoryMessageResponse, err error)
	SendGroupMessage(ctx context.Context, req *chat.SendGroupMessageRequest, callOptions ...callopt.Option) (r *chat.SendGroupMessageResponse, err error)
	QueryGroupOfflineMessage(ctx context.Context, req *chat.QueryGroupOfflineMessageRequest, callOptions ...callopt.Option) (r *chat.QueryGroupOfflineMessageResponse, err error)
	QueryGroupHistoryMessage(ctx context.Context, req *chat.QueryGroupHistoryMessageRequest, callOptions ...callopt.Option) (r *chat.QueryGroupHistoryMessageResponse, err error)
	QueryGroupMembers(ctx context.Context, req *chat.QueryGroupMembersRequest, callOptions ...callopt.Option) (r *chat.QueryGroupMembersResponse, err error)
	CheckUserExistInGroup(ctx context.Context, req *chat.CheckUserExistInGroupRequest, callOptions ...callopt.Option) (r *chat.CheckUserExistInGroupResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kChatServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kChatServiceClient struct {
	*kClient
}

func (p *kChatServiceClient) SendPrivateMessage(ctx context.Context, req *chat.SendPrivateMessageRequest, callOptions ...callopt.Option) (r *chat.SendPrivateMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendPrivateMessage(ctx, req)
}

func (p *kChatServiceClient) QueryPrivateOfflineMessage(ctx context.Context, req *chat.QueryPrivateOfflineMessageRequest, callOptions ...callopt.Option) (r *chat.QueryPrivateOfflineMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryPrivateOfflineMessage(ctx, req)
}

func (p *kChatServiceClient) QueryPrivateHistoryMessage(ctx context.Context, req *chat.QueryPrivateHistoryMessageRequest, callOptions ...callopt.Option) (r *chat.QueryPrivateHistoryMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryPrivateHistoryMessage(ctx, req)
}

func (p *kChatServiceClient) SendGroupMessage(ctx context.Context, req *chat.SendGroupMessageRequest, callOptions ...callopt.Option) (r *chat.SendGroupMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendGroupMessage(ctx, req)
}

func (p *kChatServiceClient) QueryGroupOfflineMessage(ctx context.Context, req *chat.QueryGroupOfflineMessageRequest, callOptions ...callopt.Option) (r *chat.QueryGroupOfflineMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryGroupOfflineMessage(ctx, req)
}

func (p *kChatServiceClient) QueryGroupHistoryMessage(ctx context.Context, req *chat.QueryGroupHistoryMessageRequest, callOptions ...callopt.Option) (r *chat.QueryGroupHistoryMessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryGroupHistoryMessage(ctx, req)
}

func (p *kChatServiceClient) QueryGroupMembers(ctx context.Context, req *chat.QueryGroupMembersRequest, callOptions ...callopt.Option) (r *chat.QueryGroupMembersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryGroupMembers(ctx, req)
}

func (p *kChatServiceClient) CheckUserExistInGroup(ctx context.Context, req *chat.CheckUserExistInGroupRequest, callOptions ...callopt.Option) (r *chat.CheckUserExistInGroupResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUserExistInGroup(ctx, req)
}

// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package interaction

import (
	"context"
	"fmt"
	"github.com/nnieie/golanglab5/kitex_gen/base"
)

type LikeActionRequest struct {
	VideoId    *int64 `thrift:"video_id,1,optional" frugal:"1,optional,i64" json:"video_id,omitempty"`
	CommentId  *int64 `thrift:"comment_id,2,optional" frugal:"2,optional,i64" json:"comment_id,omitempty"`
	ActionType int64  `thrift:"action_type,3" frugal:"3,default,i64" json:"action_type"`
	UserId     int64  `thrift:"user_id,4" frugal:"4,default,i64" json:"user_id"`
}

func NewLikeActionRequest() *LikeActionRequest {
	return &LikeActionRequest{}
}

func (p *LikeActionRequest) InitDefault() {
}

var LikeActionRequest_VideoId_DEFAULT int64

func (p *LikeActionRequest) GetVideoId() (v int64) {
	if !p.IsSetVideoId() {
		return LikeActionRequest_VideoId_DEFAULT
	}
	return *p.VideoId
}

var LikeActionRequest_CommentId_DEFAULT int64

func (p *LikeActionRequest) GetCommentId() (v int64) {
	if !p.IsSetCommentId() {
		return LikeActionRequest_CommentId_DEFAULT
	}
	return *p.CommentId
}

func (p *LikeActionRequest) GetActionType() (v int64) {
	return p.ActionType
}

func (p *LikeActionRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *LikeActionRequest) SetVideoId(val *int64) {
	p.VideoId = val
}
func (p *LikeActionRequest) SetCommentId(val *int64) {
	p.CommentId = val
}
func (p *LikeActionRequest) SetActionType(val int64) {
	p.ActionType = val
}
func (p *LikeActionRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *LikeActionRequest) IsSetVideoId() bool {
	return p.VideoId != nil
}

func (p *LikeActionRequest) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *LikeActionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionRequest(%+v)", *p)
}

var fieldIDToName_LikeActionRequest = map[int16]string{
	1: "video_id",
	2: "comment_id",
	3: "action_type",
	4: "user_id",
}

type LikeActionResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewLikeActionResponse() *LikeActionResponse {
	return &LikeActionResponse{}
}

func (p *LikeActionResponse) InitDefault() {
}

var LikeActionResponse_Base_DEFAULT *base.BaseResp

func (p *LikeActionResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return LikeActionResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *LikeActionResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *LikeActionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LikeActionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeActionResponse(%+v)", *p)
}

var fieldIDToName_LikeActionResponse = map[int16]string{
	1: "base",
}

type GetLikeListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewGetLikeListRequest() *GetLikeListRequest {
	return &GetLikeListRequest{}
}

func (p *GetLikeListRequest) InitDefault() {
}

func (p *GetLikeListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *GetLikeListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetLikeListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetLikeListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *GetLikeListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetLikeListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetLikeListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikeListRequest(%+v)", *p)
}

var fieldIDToName_GetLikeListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type GetLikeListResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Video  `thrift:"data,2,optional" frugal:"2,optional,list<base.Video>" json:"data,omitempty"`
}

func NewGetLikeListResponse() *GetLikeListResponse {
	return &GetLikeListResponse{}
}

func (p *GetLikeListResponse) InitDefault() {
}

var GetLikeListResponse_Base_DEFAULT *base.BaseResp

func (p *GetLikeListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetLikeListResponse_Base_DEFAULT
	}
	return p.Base
}

var GetLikeListResponse_Data_DEFAULT []*base.Video

func (p *GetLikeListResponse) GetData() (v []*base.Video) {
	if !p.IsSetData() {
		return GetLikeListResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetLikeListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetLikeListResponse) SetData(val []*base.Video) {
	p.Data = val
}

func (p *GetLikeListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLikeListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetLikeListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLikeListResponse(%+v)", *p)
}

var fieldIDToName_GetLikeListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type CommentRequest struct {
	UserId    int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId   *int64 `thrift:"video_id,2,optional" frugal:"2,optional,i64" json:"video_id,omitempty"`
	CommentId *int64 `thrift:"comment_id,3,optional" frugal:"3,optional,i64" json:"comment_id,omitempty"`
	Content   string `thrift:"content,4" frugal:"4,default,string" json:"content"`
}

func NewCommentRequest() *CommentRequest {
	return &CommentRequest{}
}

func (p *CommentRequest) InitDefault() {
}

func (p *CommentRequest) GetUserId() (v int64) {
	return p.UserId
}

var CommentRequest_VideoId_DEFAULT int64

func (p *CommentRequest) GetVideoId() (v int64) {
	if !p.IsSetVideoId() {
		return CommentRequest_VideoId_DEFAULT
	}
	return *p.VideoId
}

var CommentRequest_CommentId_DEFAULT int64

func (p *CommentRequest) GetCommentId() (v int64) {
	if !p.IsSetCommentId() {
		return CommentRequest_CommentId_DEFAULT
	}
	return *p.CommentId
}

func (p *CommentRequest) GetContent() (v string) {
	return p.Content
}
func (p *CommentRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *CommentRequest) SetVideoId(val *int64) {
	p.VideoId = val
}
func (p *CommentRequest) SetCommentId(val *int64) {
	p.CommentId = val
}
func (p *CommentRequest) SetContent(val string) {
	p.Content = val
}

func (p *CommentRequest) IsSetVideoId() bool {
	return p.VideoId != nil
}

func (p *CommentRequest) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *CommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentRequest(%+v)", *p)
}

var fieldIDToName_CommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
	4: "content",
}

type CommentResponse struct {
	Base      *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	CommentId *int64         `thrift:"comment_id,2,optional" frugal:"2,optional,i64" json:"comment_id,omitempty"`
}

func NewCommentResponse() *CommentResponse {
	return &CommentResponse{}
}

func (p *CommentResponse) InitDefault() {
}

var CommentResponse_Base_DEFAULT *base.BaseResp

func (p *CommentResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return CommentResponse_Base_DEFAULT
	}
	return p.Base
}

var CommentResponse_CommentId_DEFAULT int64

func (p *CommentResponse) GetCommentId() (v int64) {
	if !p.IsSetCommentId() {
		return CommentResponse_CommentId_DEFAULT
	}
	return *p.CommentId
}
func (p *CommentResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *CommentResponse) SetCommentId(val *int64) {
	p.CommentId = val
}

func (p *CommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CommentResponse) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *CommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentResponse(%+v)", *p)
}

var fieldIDToName_CommentResponse = map[int16]string{
	1: "base",
	2: "comment_id",
}

type GetCommentListRequest struct {
	VideoId   *int64 `thrift:"video_id,1,optional" frugal:"1,optional,i64" json:"video_id,omitempty"`
	CommentId *int64 `thrift:"comment_id,2,optional" frugal:"2,optional,i64" json:"comment_id,omitempty"`
	PageNum   int64  `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
	PageSize  int64  `thrift:"page_size,4" frugal:"4,default,i64" json:"page_size"`
}

func NewGetCommentListRequest() *GetCommentListRequest {
	return &GetCommentListRequest{}
}

func (p *GetCommentListRequest) InitDefault() {
}

var GetCommentListRequest_VideoId_DEFAULT int64

func (p *GetCommentListRequest) GetVideoId() (v int64) {
	if !p.IsSetVideoId() {
		return GetCommentListRequest_VideoId_DEFAULT
	}
	return *p.VideoId
}

var GetCommentListRequest_CommentId_DEFAULT int64

func (p *GetCommentListRequest) GetCommentId() (v int64) {
	if !p.IsSetCommentId() {
		return GetCommentListRequest_CommentId_DEFAULT
	}
	return *p.CommentId
}

func (p *GetCommentListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetCommentListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetCommentListRequest) SetVideoId(val *int64) {
	p.VideoId = val
}
func (p *GetCommentListRequest) SetCommentId(val *int64) {
	p.CommentId = val
}
func (p *GetCommentListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetCommentListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetCommentListRequest) IsSetVideoId() bool {
	return p.VideoId != nil
}

func (p *GetCommentListRequest) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *GetCommentListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentListRequest(%+v)", *p)
}

var fieldIDToName_GetCommentListRequest = map[int16]string{
	1: "video_id",
	2: "comment_id",
	3: "page_num",
	4: "page_size",
}

type GetCommentListResponse struct {
	Base *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Comment `thrift:"data,2,optional" frugal:"2,optional,list<base.Comment>" json:"data,omitempty"`
}

func NewGetCommentListResponse() *GetCommentListResponse {
	return &GetCommentListResponse{}
}

func (p *GetCommentListResponse) InitDefault() {
}

var GetCommentListResponse_Base_DEFAULT *base.BaseResp

func (p *GetCommentListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetCommentListResponse_Base_DEFAULT
	}
	return p.Base
}

var GetCommentListResponse_Data_DEFAULT []*base.Comment

func (p *GetCommentListResponse) GetData() (v []*base.Comment) {
	if !p.IsSetData() {
		return GetCommentListResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetCommentListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetCommentListResponse) SetData(val []*base.Comment) {
	p.Data = val
}

func (p *GetCommentListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCommentListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetCommentListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentListResponse(%+v)", *p)
}

var fieldIDToName_GetCommentListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type DeleteCommentRequest struct {
	UserId    int64  `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	VideoId   *int64 `thrift:"video_id,2,optional" frugal:"2,optional,i64" json:"video_id,omitempty"`
	CommentId *int64 `thrift:"comment_id,3,optional" frugal:"3,optional,i64" json:"comment_id,omitempty"`
}

func NewDeleteCommentRequest() *DeleteCommentRequest {
	return &DeleteCommentRequest{}
}

func (p *DeleteCommentRequest) InitDefault() {
}

func (p *DeleteCommentRequest) GetUserId() (v int64) {
	return p.UserId
}

var DeleteCommentRequest_VideoId_DEFAULT int64

func (p *DeleteCommentRequest) GetVideoId() (v int64) {
	if !p.IsSetVideoId() {
		return DeleteCommentRequest_VideoId_DEFAULT
	}
	return *p.VideoId
}

var DeleteCommentRequest_CommentId_DEFAULT int64

func (p *DeleteCommentRequest) GetCommentId() (v int64) {
	if !p.IsSetCommentId() {
		return DeleteCommentRequest_CommentId_DEFAULT
	}
	return *p.CommentId
}
func (p *DeleteCommentRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteCommentRequest) SetVideoId(val *int64) {
	p.VideoId = val
}
func (p *DeleteCommentRequest) SetCommentId(val *int64) {
	p.CommentId = val
}

func (p *DeleteCommentRequest) IsSetVideoId() bool {
	return p.VideoId != nil
}

func (p *DeleteCommentRequest) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *DeleteCommentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentRequest(%+v)", *p)
}

var fieldIDToName_DeleteCommentRequest = map[int16]string{
	1: "user_id",
	2: "video_id",
	3: "comment_id",
}

type DeleteCommentResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewDeleteCommentResponse() *DeleteCommentResponse {
	return &DeleteCommentResponse{}
}

func (p *DeleteCommentResponse) InitDefault() {
}

var DeleteCommentResponse_Base_DEFAULT *base.BaseResp

func (p *DeleteCommentResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return DeleteCommentResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteCommentResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *DeleteCommentResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteCommentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentResponse(%+v)", *p)
}

var fieldIDToName_DeleteCommentResponse = map[int16]string{
	1: "base",
}

type InteractionService interface {
	LikeAction(ctx context.Context, req *LikeActionRequest) (r *LikeActionResponse, err error)

	GetLikeList(ctx context.Context, req *GetLikeListRequest) (r *GetLikeListResponse, err error)

	CommentAction(ctx context.Context, req *CommentRequest) (r *CommentResponse, err error)

	GetCommentList(ctx context.Context, req *GetCommentListRequest) (r *GetCommentListResponse, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentRequest) (r *DeleteCommentResponse, err error)
}

type InteractionServiceLikeActionArgs struct {
	Req *LikeActionRequest `thrift:"req,1" frugal:"1,default,LikeActionRequest" json:"req"`
}

func NewInteractionServiceLikeActionArgs() *InteractionServiceLikeActionArgs {
	return &InteractionServiceLikeActionArgs{}
}

func (p *InteractionServiceLikeActionArgs) InitDefault() {
}

var InteractionServiceLikeActionArgs_Req_DEFAULT *LikeActionRequest

func (p *InteractionServiceLikeActionArgs) GetReq() (v *LikeActionRequest) {
	if !p.IsSetReq() {
		return InteractionServiceLikeActionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceLikeActionArgs) SetReq(val *LikeActionRequest) {
	p.Req = val
}

func (p *InteractionServiceLikeActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceLikeActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionArgs = map[int16]string{
	1: "req",
}

type InteractionServiceLikeActionResult struct {
	Success *LikeActionResponse `thrift:"success,0,optional" frugal:"0,optional,LikeActionResponse" json:"success,omitempty"`
}

func NewInteractionServiceLikeActionResult() *InteractionServiceLikeActionResult {
	return &InteractionServiceLikeActionResult{}
}

func (p *InteractionServiceLikeActionResult) InitDefault() {
}

var InteractionServiceLikeActionResult_Success_DEFAULT *LikeActionResponse

func (p *InteractionServiceLikeActionResult) GetSuccess() (v *LikeActionResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceLikeActionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceLikeActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeActionResponse)
}

func (p *InteractionServiceLikeActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceLikeActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceLikeActionResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceLikeActionResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetLikeListArgs struct {
	Req *GetLikeListRequest `thrift:"req,1" frugal:"1,default,GetLikeListRequest" json:"req"`
}

func NewInteractionServiceGetLikeListArgs() *InteractionServiceGetLikeListArgs {
	return &InteractionServiceGetLikeListArgs{}
}

func (p *InteractionServiceGetLikeListArgs) InitDefault() {
}

var InteractionServiceGetLikeListArgs_Req_DEFAULT *GetLikeListRequest

func (p *InteractionServiceGetLikeListArgs) GetReq() (v *GetLikeListRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetLikeListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetLikeListArgs) SetReq(val *GetLikeListRequest) {
	p.Req = val
}

func (p *InteractionServiceGetLikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetLikeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetLikeListArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetLikeListArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetLikeListResult struct {
	Success *GetLikeListResponse `thrift:"success,0,optional" frugal:"0,optional,GetLikeListResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetLikeListResult() *InteractionServiceGetLikeListResult {
	return &InteractionServiceGetLikeListResult{}
}

func (p *InteractionServiceGetLikeListResult) InitDefault() {
}

var InteractionServiceGetLikeListResult_Success_DEFAULT *GetLikeListResponse

func (p *InteractionServiceGetLikeListResult) GetSuccess() (v *GetLikeListResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetLikeListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetLikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLikeListResponse)
}

func (p *InteractionServiceGetLikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetLikeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetLikeListResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetLikeListResult = map[int16]string{
	0: "success",
}

type InteractionServiceCommentActionArgs struct {
	Req *CommentRequest `thrift:"req,1" frugal:"1,default,CommentRequest" json:"req"`
}

func NewInteractionServiceCommentActionArgs() *InteractionServiceCommentActionArgs {
	return &InteractionServiceCommentActionArgs{}
}

func (p *InteractionServiceCommentActionArgs) InitDefault() {
}

var InteractionServiceCommentActionArgs_Req_DEFAULT *CommentRequest

func (p *InteractionServiceCommentActionArgs) GetReq() (v *CommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceCommentActionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceCommentActionArgs) SetReq(val *CommentRequest) {
	p.Req = val
}

func (p *InteractionServiceCommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceCommentActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentActionArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentActionArgs = map[int16]string{
	1: "req",
}

type InteractionServiceCommentActionResult struct {
	Success *CommentResponse `thrift:"success,0,optional" frugal:"0,optional,CommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceCommentActionResult() *InteractionServiceCommentActionResult {
	return &InteractionServiceCommentActionResult{}
}

func (p *InteractionServiceCommentActionResult) InitDefault() {
}

var InteractionServiceCommentActionResult_Success_DEFAULT *CommentResponse

func (p *InteractionServiceCommentActionResult) GetSuccess() (v *CommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceCommentActionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceCommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentResponse)
}

func (p *InteractionServiceCommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceCommentActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceCommentActionResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceCommentActionResult = map[int16]string{
	0: "success",
}

type InteractionServiceGetCommentListArgs struct {
	Req *GetCommentListRequest `thrift:"req,1" frugal:"1,default,GetCommentListRequest" json:"req"`
}

func NewInteractionServiceGetCommentListArgs() *InteractionServiceGetCommentListArgs {
	return &InteractionServiceGetCommentListArgs{}
}

func (p *InteractionServiceGetCommentListArgs) InitDefault() {
}

var InteractionServiceGetCommentListArgs_Req_DEFAULT *GetCommentListRequest

func (p *InteractionServiceGetCommentListArgs) GetReq() (v *GetCommentListRequest) {
	if !p.IsSetReq() {
		return InteractionServiceGetCommentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceGetCommentListArgs) SetReq(val *GetCommentListRequest) {
	p.Req = val
}

func (p *InteractionServiceGetCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceGetCommentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentListArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentListArgs = map[int16]string{
	1: "req",
}

type InteractionServiceGetCommentListResult struct {
	Success *GetCommentListResponse `thrift:"success,0,optional" frugal:"0,optional,GetCommentListResponse" json:"success,omitempty"`
}

func NewInteractionServiceGetCommentListResult() *InteractionServiceGetCommentListResult {
	return &InteractionServiceGetCommentListResult{}
}

func (p *InteractionServiceGetCommentListResult) InitDefault() {
}

var InteractionServiceGetCommentListResult_Success_DEFAULT *GetCommentListResponse

func (p *InteractionServiceGetCommentListResult) GetSuccess() (v *GetCommentListResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceGetCommentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceGetCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCommentListResponse)
}

func (p *InteractionServiceGetCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceGetCommentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceGetCommentListResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceGetCommentListResult = map[int16]string{
	0: "success",
}

type InteractionServiceDeleteCommentArgs struct {
	Req *DeleteCommentRequest `thrift:"req,1" frugal:"1,default,DeleteCommentRequest" json:"req"`
}

func NewInteractionServiceDeleteCommentArgs() *InteractionServiceDeleteCommentArgs {
	return &InteractionServiceDeleteCommentArgs{}
}

func (p *InteractionServiceDeleteCommentArgs) InitDefault() {
}

var InteractionServiceDeleteCommentArgs_Req_DEFAULT *DeleteCommentRequest

func (p *InteractionServiceDeleteCommentArgs) GetReq() (v *DeleteCommentRequest) {
	if !p.IsSetReq() {
		return InteractionServiceDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractionServiceDeleteCommentArgs) SetReq(val *DeleteCommentRequest) {
	p.Req = val
}

func (p *InteractionServiceDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractionServiceDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentArgs(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentArgs = map[int16]string{
	1: "req",
}

type InteractionServiceDeleteCommentResult struct {
	Success *DeleteCommentResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteCommentResponse" json:"success,omitempty"`
}

func NewInteractionServiceDeleteCommentResult() *InteractionServiceDeleteCommentResult {
	return &InteractionServiceDeleteCommentResult{}
}

func (p *InteractionServiceDeleteCommentResult) InitDefault() {
}

var InteractionServiceDeleteCommentResult_Success_DEFAULT *DeleteCommentResponse

func (p *InteractionServiceDeleteCommentResult) GetSuccess() (v *DeleteCommentResponse) {
	if !p.IsSetSuccess() {
		return InteractionServiceDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractionServiceDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCommentResponse)
}

func (p *InteractionServiceDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractionServiceDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractionServiceDeleteCommentResult(%+v)", *p)
}

var fieldIDToName_InteractionServiceDeleteCommentResult = map[int16]string{
	0: "success",
}

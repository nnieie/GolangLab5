// Code generated by Kitex v0.15.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interaction "github.com/nnieie/golanglab5/kitex_gen/interaction"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"LikeAction": kitex.NewMethodInfo(
		likeActionHandler,
		newInteractionServiceLikeActionArgs,
		newInteractionServiceLikeActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLikeList": kitex.NewMethodInfo(
		getLikeListHandler,
		newInteractionServiceGetLikeListArgs,
		newInteractionServiceGetLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentAction": kitex.NewMethodInfo(
		commentActionHandler,
		newInteractionServiceCommentActionArgs,
		newInteractionServiceCommentActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCommentList": kitex.NewMethodInfo(
		getCommentListHandler,
		newInteractionServiceGetCommentListArgs,
		newInteractionServiceGetCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractionServiceDeleteCommentArgs,
		newInteractionServiceDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceLikeActionArgs)
	realResult := result.(*interaction.InteractionServiceLikeActionResult)
	success, err := handler.(interaction.InteractionService).LikeAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceLikeActionArgs() interface{} {
	return interaction.NewInteractionServiceLikeActionArgs()
}

func newInteractionServiceLikeActionResult() interface{} {
	return interaction.NewInteractionServiceLikeActionResult()
}

func getLikeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetLikeListArgs)
	realResult := result.(*interaction.InteractionServiceGetLikeListResult)
	success, err := handler.(interaction.InteractionService).GetLikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetLikeListArgs() interface{} {
	return interaction.NewInteractionServiceGetLikeListArgs()
}

func newInteractionServiceGetLikeListResult() interface{} {
	return interaction.NewInteractionServiceGetLikeListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceCommentActionArgs)
	realResult := result.(*interaction.InteractionServiceCommentActionResult)
	success, err := handler.(interaction.InteractionService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceCommentActionArgs() interface{} {
	return interaction.NewInteractionServiceCommentActionArgs()
}

func newInteractionServiceCommentActionResult() interface{} {
	return interaction.NewInteractionServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetCommentListArgs)
	realResult := result.(*interaction.InteractionServiceGetCommentListResult)
	success, err := handler.(interaction.InteractionService).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetCommentListArgs() interface{} {
	return interaction.NewInteractionServiceGetCommentListArgs()
}

func newInteractionServiceGetCommentListResult() interface{} {
	return interaction.NewInteractionServiceGetCommentListResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceDeleteCommentArgs)
	realResult := result.(*interaction.InteractionServiceDeleteCommentResult)
	success, err := handler.(interaction.InteractionService).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteCommentArgs() interface{} {
	return interaction.NewInteractionServiceDeleteCommentArgs()
}

func newInteractionServiceDeleteCommentResult() interface{} {
	return interaction.NewInteractionServiceDeleteCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, req *interaction.LikeActionRequest) (r *interaction.LikeActionResponse, err error) {
	var _args interaction.InteractionServiceLikeActionArgs
	_args.Req = req
	var _result interaction.InteractionServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeList(ctx context.Context, req *interaction.GetLikeListRequest) (r *interaction.GetLikeListResponse, err error) {
	var _args interaction.InteractionServiceGetLikeListArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetLikeListResult
	if err = p.c.Call(ctx, "GetLikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *interaction.CommentRequest) (r *interaction.CommentResponse, err error) {
	var _args interaction.InteractionServiceCommentActionArgs
	_args.Req = req
	var _result interaction.InteractionServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *interaction.GetCommentListRequest) (r *interaction.GetCommentListResponse, err error) {
	var _args interaction.InteractionServiceGetCommentListArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interaction.DeleteCommentRequest) (r *interaction.DeleteCommentResponse, err error) {
	var _args interaction.InteractionServiceDeleteCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

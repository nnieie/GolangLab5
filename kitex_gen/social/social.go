// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package social

import (
	"context"
	"fmt"
	"github.com/nnieie/golanglab5/kitex_gen/base"
)

type FollowActionRequest struct {
	ToUserId   int64 `thrift:"to_user_id,1" frugal:"1,default,i64" json:"to_user_id"`
	ActionType int64 `thrift:"action_type,2" frugal:"2,default,i64" json:"action_type"`
	UserId     int64 `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewFollowActionRequest() *FollowActionRequest {
	return &FollowActionRequest{}
}

func (p *FollowActionRequest) InitDefault() {
}

func (p *FollowActionRequest) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *FollowActionRequest) GetActionType() (v int64) {
	return p.ActionType
}

func (p *FollowActionRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *FollowActionRequest) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *FollowActionRequest) SetActionType(val int64) {
	p.ActionType = val
}
func (p *FollowActionRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *FollowActionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowActionRequest(%+v)", *p)
}

var fieldIDToName_FollowActionRequest = map[int16]string{
	1: "to_user_id",
	2: "action_type",
	3: "user_id",
}

type FollowActionResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewFollowActionResponse() *FollowActionResponse {
	return &FollowActionResponse{}
}

func (p *FollowActionResponse) InitDefault() {
}

var FollowActionResponse_Base_DEFAULT *base.BaseResp

func (p *FollowActionResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return FollowActionResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *FollowActionResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *FollowActionResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *FollowActionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowActionResponse(%+v)", *p)
}

var fieldIDToName_FollowActionResponse = map[int16]string{
	1: "base",
}

type QueryFollowListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewQueryFollowListRequest() *QueryFollowListRequest {
	return &QueryFollowListRequest{}
}

func (p *QueryFollowListRequest) InitDefault() {
}

func (p *QueryFollowListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QueryFollowListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryFollowListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *QueryFollowListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QueryFollowListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryFollowListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *QueryFollowListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFollowListRequest(%+v)", *p)
}

var fieldIDToName_QueryFollowListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type QueryFollowListResponse struct {
	Base  *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data  []*base.User   `thrift:"data,2,optional" frugal:"2,optional,list<base.User>" json:"data,omitempty"`
	Total *int64         `thrift:"total,3,optional" frugal:"3,optional,i64" json:"total,omitempty"`
}

func NewQueryFollowListResponse() *QueryFollowListResponse {
	return &QueryFollowListResponse{}
}

func (p *QueryFollowListResponse) InitDefault() {
}

var QueryFollowListResponse_Base_DEFAULT *base.BaseResp

func (p *QueryFollowListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryFollowListResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryFollowListResponse_Data_DEFAULT []*base.User

func (p *QueryFollowListResponse) GetData() (v []*base.User) {
	if !p.IsSetData() {
		return QueryFollowListResponse_Data_DEFAULT
	}
	return p.Data
}

var QueryFollowListResponse_Total_DEFAULT int64

func (p *QueryFollowListResponse) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return QueryFollowListResponse_Total_DEFAULT
	}
	return *p.Total
}
func (p *QueryFollowListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryFollowListResponse) SetData(val []*base.User) {
	p.Data = val
}
func (p *QueryFollowListResponse) SetTotal(val *int64) {
	p.Total = val
}

func (p *QueryFollowListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryFollowListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryFollowListResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *QueryFollowListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFollowListResponse(%+v)", *p)
}

var fieldIDToName_QueryFollowListResponse = map[int16]string{
	1: "base",
	2: "data",
	3: "total",
}

type QueryFollowerListRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	PageNum  int64 `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewQueryFollowerListRequest() *QueryFollowerListRequest {
	return &QueryFollowerListRequest{}
}

func (p *QueryFollowerListRequest) InitDefault() {
}

func (p *QueryFollowerListRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *QueryFollowerListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryFollowerListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *QueryFollowerListRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *QueryFollowerListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryFollowerListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *QueryFollowerListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFollowerListRequest(%+v)", *p)
}

var fieldIDToName_QueryFollowerListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

type QueryFollowerListResponse struct {
	Base  *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data  []*base.User   `thrift:"data,2,optional" frugal:"2,optional,list<base.User>" json:"data,omitempty"`
	Total *int64         `thrift:"total,3,optional" frugal:"3,optional,i64" json:"total,omitempty"`
}

func NewQueryFollowerListResponse() *QueryFollowerListResponse {
	return &QueryFollowerListResponse{}
}

func (p *QueryFollowerListResponse) InitDefault() {
}

var QueryFollowerListResponse_Base_DEFAULT *base.BaseResp

func (p *QueryFollowerListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryFollowerListResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryFollowerListResponse_Data_DEFAULT []*base.User

func (p *QueryFollowerListResponse) GetData() (v []*base.User) {
	if !p.IsSetData() {
		return QueryFollowerListResponse_Data_DEFAULT
	}
	return p.Data
}

var QueryFollowerListResponse_Total_DEFAULT int64

func (p *QueryFollowerListResponse) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return QueryFollowerListResponse_Total_DEFAULT
	}
	return *p.Total
}
func (p *QueryFollowerListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryFollowerListResponse) SetData(val []*base.User) {
	p.Data = val
}
func (p *QueryFollowerListResponse) SetTotal(val *int64) {
	p.Total = val
}

func (p *QueryFollowerListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryFollowerListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryFollowerListResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *QueryFollowerListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFollowerListResponse(%+v)", *p)
}

var fieldIDToName_QueryFollowerListResponse = map[int16]string{
	1: "base",
	2: "data",
	3: "total",
}

type QueryFriendListRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
	UserId   int64 `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewQueryFriendListRequest() *QueryFriendListRequest {
	return &QueryFriendListRequest{}
}

func (p *QueryFriendListRequest) InitDefault() {
}

func (p *QueryFriendListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *QueryFriendListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *QueryFriendListRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *QueryFriendListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *QueryFriendListRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *QueryFriendListRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *QueryFriendListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFriendListRequest(%+v)", *p)
}

var fieldIDToName_QueryFriendListRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
	3: "user_id",
}

type QueryFriendListResponse struct {
	Base  *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data  []*base.User   `thrift:"data,2,optional" frugal:"2,optional,list<base.User>" json:"data,omitempty"`
	Total *int64         `thrift:"total,3,optional" frugal:"3,optional,i64" json:"total,omitempty"`
}

func NewQueryFriendListResponse() *QueryFriendListResponse {
	return &QueryFriendListResponse{}
}

func (p *QueryFriendListResponse) InitDefault() {
}

var QueryFriendListResponse_Base_DEFAULT *base.BaseResp

func (p *QueryFriendListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return QueryFriendListResponse_Base_DEFAULT
	}
	return p.Base
}

var QueryFriendListResponse_Data_DEFAULT []*base.User

func (p *QueryFriendListResponse) GetData() (v []*base.User) {
	if !p.IsSetData() {
		return QueryFriendListResponse_Data_DEFAULT
	}
	return p.Data
}

var QueryFriendListResponse_Total_DEFAULT int64

func (p *QueryFriendListResponse) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return QueryFriendListResponse_Total_DEFAULT
	}
	return *p.Total
}
func (p *QueryFriendListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *QueryFriendListResponse) SetData(val []*base.User) {
	p.Data = val
}
func (p *QueryFriendListResponse) SetTotal(val *int64) {
	p.Total = val
}

func (p *QueryFriendListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *QueryFriendListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryFriendListResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *QueryFriendListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryFriendListResponse(%+v)", *p)
}

var fieldIDToName_QueryFriendListResponse = map[int16]string{
	1: "base",
	2: "data",
	3: "total",
}

type SocialService interface {
	FollowAction(ctx context.Context, req *FollowActionRequest) (r *FollowActionResponse, err error)

	QueryFollowList(ctx context.Context, req *QueryFollowListRequest) (r *QueryFollowListResponse, err error)

	QueryFollowerList(ctx context.Context, req *QueryFollowerListRequest) (r *QueryFollowerListResponse, err error)

	QueryFriendList(ctx context.Context, req *QueryFriendListRequest) (r *QueryFriendListResponse, err error)
}

type SocialServiceFollowActionArgs struct {
	Req *FollowActionRequest `thrift:"req,1" frugal:"1,default,FollowActionRequest" json:"req"`
}

func NewSocialServiceFollowActionArgs() *SocialServiceFollowActionArgs {
	return &SocialServiceFollowActionArgs{}
}

func (p *SocialServiceFollowActionArgs) InitDefault() {
}

var SocialServiceFollowActionArgs_Req_DEFAULT *FollowActionRequest

func (p *SocialServiceFollowActionArgs) GetReq() (v *FollowActionRequest) {
	if !p.IsSetReq() {
		return SocialServiceFollowActionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceFollowActionArgs) SetReq(val *FollowActionRequest) {
	p.Req = val
}

func (p *SocialServiceFollowActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceFollowActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceFollowActionArgs(%+v)", *p)
}

var fieldIDToName_SocialServiceFollowActionArgs = map[int16]string{
	1: "req",
}

type SocialServiceFollowActionResult struct {
	Success *FollowActionResponse `thrift:"success,0,optional" frugal:"0,optional,FollowActionResponse" json:"success,omitempty"`
}

func NewSocialServiceFollowActionResult() *SocialServiceFollowActionResult {
	return &SocialServiceFollowActionResult{}
}

func (p *SocialServiceFollowActionResult) InitDefault() {
}

var SocialServiceFollowActionResult_Success_DEFAULT *FollowActionResponse

func (p *SocialServiceFollowActionResult) GetSuccess() (v *FollowActionResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceFollowActionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceFollowActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowActionResponse)
}

func (p *SocialServiceFollowActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceFollowActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceFollowActionResult(%+v)", *p)
}

var fieldIDToName_SocialServiceFollowActionResult = map[int16]string{
	0: "success",
}

type SocialServiceQueryFollowListArgs struct {
	Req *QueryFollowListRequest `thrift:"req,1" frugal:"1,default,QueryFollowListRequest" json:"req"`
}

func NewSocialServiceQueryFollowListArgs() *SocialServiceQueryFollowListArgs {
	return &SocialServiceQueryFollowListArgs{}
}

func (p *SocialServiceQueryFollowListArgs) InitDefault() {
}

var SocialServiceQueryFollowListArgs_Req_DEFAULT *QueryFollowListRequest

func (p *SocialServiceQueryFollowListArgs) GetReq() (v *QueryFollowListRequest) {
	if !p.IsSetReq() {
		return SocialServiceQueryFollowListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceQueryFollowListArgs) SetReq(val *QueryFollowListRequest) {
	p.Req = val
}

func (p *SocialServiceQueryFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceQueryFollowListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFollowListArgs(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFollowListArgs = map[int16]string{
	1: "req",
}

type SocialServiceQueryFollowListResult struct {
	Success *QueryFollowListResponse `thrift:"success,0,optional" frugal:"0,optional,QueryFollowListResponse" json:"success,omitempty"`
}

func NewSocialServiceQueryFollowListResult() *SocialServiceQueryFollowListResult {
	return &SocialServiceQueryFollowListResult{}
}

func (p *SocialServiceQueryFollowListResult) InitDefault() {
}

var SocialServiceQueryFollowListResult_Success_DEFAULT *QueryFollowListResponse

func (p *SocialServiceQueryFollowListResult) GetSuccess() (v *QueryFollowListResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceQueryFollowListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceQueryFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryFollowListResponse)
}

func (p *SocialServiceQueryFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceQueryFollowListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFollowListResult(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFollowListResult = map[int16]string{
	0: "success",
}

type SocialServiceQueryFollowerListArgs struct {
	Req *QueryFollowerListRequest `thrift:"req,1" frugal:"1,default,QueryFollowerListRequest" json:"req"`
}

func NewSocialServiceQueryFollowerListArgs() *SocialServiceQueryFollowerListArgs {
	return &SocialServiceQueryFollowerListArgs{}
}

func (p *SocialServiceQueryFollowerListArgs) InitDefault() {
}

var SocialServiceQueryFollowerListArgs_Req_DEFAULT *QueryFollowerListRequest

func (p *SocialServiceQueryFollowerListArgs) GetReq() (v *QueryFollowerListRequest) {
	if !p.IsSetReq() {
		return SocialServiceQueryFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceQueryFollowerListArgs) SetReq(val *QueryFollowerListRequest) {
	p.Req = val
}

func (p *SocialServiceQueryFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceQueryFollowerListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFollowerListArgs(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFollowerListArgs = map[int16]string{
	1: "req",
}

type SocialServiceQueryFollowerListResult struct {
	Success *QueryFollowerListResponse `thrift:"success,0,optional" frugal:"0,optional,QueryFollowerListResponse" json:"success,omitempty"`
}

func NewSocialServiceQueryFollowerListResult() *SocialServiceQueryFollowerListResult {
	return &SocialServiceQueryFollowerListResult{}
}

func (p *SocialServiceQueryFollowerListResult) InitDefault() {
}

var SocialServiceQueryFollowerListResult_Success_DEFAULT *QueryFollowerListResponse

func (p *SocialServiceQueryFollowerListResult) GetSuccess() (v *QueryFollowerListResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceQueryFollowerListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceQueryFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryFollowerListResponse)
}

func (p *SocialServiceQueryFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceQueryFollowerListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFollowerListResult(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFollowerListResult = map[int16]string{
	0: "success",
}

type SocialServiceQueryFriendListArgs struct {
	Req *QueryFriendListRequest `thrift:"req,1" frugal:"1,default,QueryFriendListRequest" json:"req"`
}

func NewSocialServiceQueryFriendListArgs() *SocialServiceQueryFriendListArgs {
	return &SocialServiceQueryFriendListArgs{}
}

func (p *SocialServiceQueryFriendListArgs) InitDefault() {
}

var SocialServiceQueryFriendListArgs_Req_DEFAULT *QueryFriendListRequest

func (p *SocialServiceQueryFriendListArgs) GetReq() (v *QueryFriendListRequest) {
	if !p.IsSetReq() {
		return SocialServiceQueryFriendListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SocialServiceQueryFriendListArgs) SetReq(val *QueryFriendListRequest) {
	p.Req = val
}

func (p *SocialServiceQueryFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SocialServiceQueryFriendListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFriendListArgs(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFriendListArgs = map[int16]string{
	1: "req",
}

type SocialServiceQueryFriendListResult struct {
	Success *QueryFriendListResponse `thrift:"success,0,optional" frugal:"0,optional,QueryFriendListResponse" json:"success,omitempty"`
}

func NewSocialServiceQueryFriendListResult() *SocialServiceQueryFriendListResult {
	return &SocialServiceQueryFriendListResult{}
}

func (p *SocialServiceQueryFriendListResult) InitDefault() {
}

var SocialServiceQueryFriendListResult_Success_DEFAULT *QueryFriendListResponse

func (p *SocialServiceQueryFriendListResult) GetSuccess() (v *QueryFriendListResponse) {
	if !p.IsSetSuccess() {
		return SocialServiceQueryFriendListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SocialServiceQueryFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryFriendListResponse)
}

func (p *SocialServiceQueryFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SocialServiceQueryFriendListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SocialServiceQueryFriendListResult(%+v)", *p)
}

var fieldIDToName_SocialServiceQueryFriendListResult = map[int16]string{
	0: "success",
}

// Code generated by Kitex v0.15.1. DO NOT EDIT.

package socialservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	social "github.com/nnieie/golanglab5/kitex_gen/social"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FollowAction": kitex.NewMethodInfo(
		followActionHandler,
		newSocialServiceFollowActionArgs,
		newSocialServiceFollowActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryFollowList": kitex.NewMethodInfo(
		queryFollowListHandler,
		newSocialServiceQueryFollowListArgs,
		newSocialServiceQueryFollowListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryFollowerList": kitex.NewMethodInfo(
		queryFollowerListHandler,
		newSocialServiceQueryFollowerListArgs,
		newSocialServiceQueryFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryFriendList": kitex.NewMethodInfo(
		queryFriendListHandler,
		newSocialServiceQueryFriendListArgs,
		newSocialServiceQueryFriendListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	socialServiceServiceInfo                = NewServiceInfo()
	socialServiceServiceInfoForClient       = NewServiceInfoForClient()
	socialServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return socialServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return socialServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return socialServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SocialService"
	handlerType := (*social.SocialService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "social",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func followActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceFollowActionArgs)
	realResult := result.(*social.SocialServiceFollowActionResult)
	success, err := handler.(social.SocialService).FollowAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceFollowActionArgs() interface{} {
	return social.NewSocialServiceFollowActionArgs()
}

func newSocialServiceFollowActionResult() interface{} {
	return social.NewSocialServiceFollowActionResult()
}

func queryFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceQueryFollowListArgs)
	realResult := result.(*social.SocialServiceQueryFollowListResult)
	success, err := handler.(social.SocialService).QueryFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceQueryFollowListArgs() interface{} {
	return social.NewSocialServiceQueryFollowListArgs()
}

func newSocialServiceQueryFollowListResult() interface{} {
	return social.NewSocialServiceQueryFollowListResult()
}

func queryFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceQueryFollowerListArgs)
	realResult := result.(*social.SocialServiceQueryFollowerListResult)
	success, err := handler.(social.SocialService).QueryFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceQueryFollowerListArgs() interface{} {
	return social.NewSocialServiceQueryFollowerListArgs()
}

func newSocialServiceQueryFollowerListResult() interface{} {
	return social.NewSocialServiceQueryFollowerListResult()
}

func queryFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*social.SocialServiceQueryFriendListArgs)
	realResult := result.(*social.SocialServiceQueryFriendListResult)
	success, err := handler.(social.SocialService).QueryFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocialServiceQueryFriendListArgs() interface{} {
	return social.NewSocialServiceQueryFriendListArgs()
}

func newSocialServiceQueryFriendListResult() interface{} {
	return social.NewSocialServiceQueryFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowAction(ctx context.Context, req *social.FollowActionRequest) (r *social.FollowActionResponse, err error) {
	var _args social.SocialServiceFollowActionArgs
	_args.Req = req
	var _result social.SocialServiceFollowActionResult
	if err = p.c.Call(ctx, "FollowAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFollowList(ctx context.Context, req *social.QueryFollowListRequest) (r *social.QueryFollowListResponse, err error) {
	var _args social.SocialServiceQueryFollowListArgs
	_args.Req = req
	var _result social.SocialServiceQueryFollowListResult
	if err = p.c.Call(ctx, "QueryFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFollowerList(ctx context.Context, req *social.QueryFollowerListRequest) (r *social.QueryFollowerListResponse, err error) {
	var _args social.SocialServiceQueryFollowerListArgs
	_args.Req = req
	var _result social.SocialServiceQueryFollowerListResult
	if err = p.c.Call(ctx, "QueryFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFriendList(ctx context.Context, req *social.QueryFriendListRequest) (r *social.QueryFriendListResponse, err error) {
	var _args social.SocialServiceQueryFriendListArgs
	_args.Req = req
	var _result social.SocialServiceQueryFriendListResult
	if err = p.c.Call(ctx, "QueryFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

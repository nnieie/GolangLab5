// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"github.com/nnieie/golanglab5/kitex_gen/base"
)

type RegisterRequest struct {
	Username string `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string `thrift:"password,2" frugal:"2,default,string" json:"password"`
}

func NewRegisterRequest() *RegisterRequest {
	return &RegisterRequest{}
}

func (p *RegisterRequest) InitDefault() {
}

func (p *RegisterRequest) GetUsername() (v string) {
	return p.Username
}

func (p *RegisterRequest) GetPassword() (v string) {
	return p.Password
}
func (p *RegisterRequest) SetUsername(val string) {
	p.Username = val
}
func (p *RegisterRequest) SetPassword(val string) {
	p.Password = val
}

func (p *RegisterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

var fieldIDToName_RegisterRequest = map[int16]string{
	1: "username",
	2: "password",
}

type RegisterResponse struct {
	Base   *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	UserId *int64         `thrift:"user_id,2,optional" frugal:"2,optional,i64" json:"user_id,omitempty"`
}

func NewRegisterResponse() *RegisterResponse {
	return &RegisterResponse{}
}

func (p *RegisterResponse) InitDefault() {
}

var RegisterResponse_Base_DEFAULT *base.BaseResp

func (p *RegisterResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return RegisterResponse_Base_DEFAULT
	}
	return p.Base
}

var RegisterResponse_UserId_DEFAULT int64

func (p *RegisterResponse) GetUserId() (v int64) {
	if !p.IsSetUserId() {
		return RegisterResponse_UserId_DEFAULT
	}
	return *p.UserId
}
func (p *RegisterResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *RegisterResponse) SetUserId(val *int64) {
	p.UserId = val
}

func (p *RegisterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterResponse) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *RegisterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

var fieldIDToName_RegisterResponse = map[int16]string{
	1: "base",
	2: "user_id",
}

type LoginRequest struct {
	Username string  `thrift:"username,1" frugal:"1,default,string" json:"username"`
	Password string  `thrift:"password,2" frugal:"2,default,string" json:"password"`
	MFAcode  *string `thrift:"MFAcode,3,optional" frugal:"3,optional,string" json:"MFAcode,omitempty"`
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (p *LoginRequest) InitDefault() {
}

func (p *LoginRequest) GetUsername() (v string) {
	return p.Username
}

func (p *LoginRequest) GetPassword() (v string) {
	return p.Password
}

var LoginRequest_MFAcode_DEFAULT string

func (p *LoginRequest) GetMFAcode() (v string) {
	if !p.IsSetMFAcode() {
		return LoginRequest_MFAcode_DEFAULT
	}
	return *p.MFAcode
}
func (p *LoginRequest) SetUsername(val string) {
	p.Username = val
}
func (p *LoginRequest) SetPassword(val string) {
	p.Password = val
}
func (p *LoginRequest) SetMFAcode(val *string) {
	p.MFAcode = val
}

func (p *LoginRequest) IsSetMFAcode() bool {
	return p.MFAcode != nil
}

func (p *LoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRequest(%+v)", *p)
}

var fieldIDToName_LoginRequest = map[int16]string{
	1: "username",
	2: "password",
	3: "MFAcode",
}

type LoginResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data *base.User     `thrift:"data,2,optional" frugal:"2,optional,base.User" json:"data,omitempty"`
}

func NewLoginResponse() *LoginResponse {
	return &LoginResponse{}
}

func (p *LoginResponse) InitDefault() {
}

var LoginResponse_Base_DEFAULT *base.BaseResp

func (p *LoginResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return LoginResponse_Base_DEFAULT
	}
	return p.Base
}

var LoginResponse_Data_DEFAULT *base.User

func (p *LoginResponse) GetData() (v *base.User) {
	if !p.IsSetData() {
		return LoginResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *LoginResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *LoginResponse) SetData(val *base.User) {
	p.Data = val
}

func (p *LoginResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *LoginResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *LoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginResponse(%+v)", *p)
}

var fieldIDToName_LoginResponse = map[int16]string{
	1: "base",
	2: "data",
}

type UserInfoRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewUserInfoRequest() *UserInfoRequest {
	return &UserInfoRequest{}
}

func (p *UserInfoRequest) InitDefault() {
}

func (p *UserInfoRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *UserInfoRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *UserInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoRequest(%+v)", *p)
}

var fieldIDToName_UserInfoRequest = map[int16]string{
	1: "user_id",
}

type UserInfoResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data *base.User     `thrift:"data,2,optional" frugal:"2,optional,base.User" json:"data,omitempty"`
}

func NewUserInfoResponse() *UserInfoResponse {
	return &UserInfoResponse{}
}

func (p *UserInfoResponse) InitDefault() {
}

var UserInfoResponse_Base_DEFAULT *base.BaseResp

func (p *UserInfoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UserInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var UserInfoResponse_Data_DEFAULT *base.User

func (p *UserInfoResponse) GetData() (v *base.User) {
	if !p.IsSetData() {
		return UserInfoResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UserInfoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *UserInfoResponse) SetData(val *base.User) {
	p.Data = val
}

func (p *UserInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UserInfoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UserInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoResponse(%+v)", *p)
}

var fieldIDToName_UserInfoResponse = map[int16]string{
	1: "base",
	2: "data",
}

type UploadAvatarRequest struct {
	AvatarUrl string `thrift:"avatar_url,1" frugal:"1,default,string" json:"avatar_url"`
	UserId    int64  `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewUploadAvatarRequest() *UploadAvatarRequest {
	return &UploadAvatarRequest{}
}

func (p *UploadAvatarRequest) InitDefault() {
}

func (p *UploadAvatarRequest) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *UploadAvatarRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *UploadAvatarRequest) SetAvatarUrl(val string) {
	p.AvatarUrl = val
}
func (p *UploadAvatarRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *UploadAvatarRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarRequest(%+v)", *p)
}

var fieldIDToName_UploadAvatarRequest = map[int16]string{
	1: "avatar_url",
	2: "user_id",
}

type UploadAvatarResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data *base.User     `thrift:"data,2,optional" frugal:"2,optional,base.User" json:"data,omitempty"`
}

func NewUploadAvatarResponse() *UploadAvatarResponse {
	return &UploadAvatarResponse{}
}

func (p *UploadAvatarResponse) InitDefault() {
}

var UploadAvatarResponse_Base_DEFAULT *base.BaseResp

func (p *UploadAvatarResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return UploadAvatarResponse_Base_DEFAULT
	}
	return p.Base
}

var UploadAvatarResponse_Data_DEFAULT *base.User

func (p *UploadAvatarResponse) GetData() (v *base.User) {
	if !p.IsSetData() {
		return UploadAvatarResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UploadAvatarResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *UploadAvatarResponse) SetData(val *base.User) {
	p.Data = val
}

func (p *UploadAvatarResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadAvatarResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UploadAvatarResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadAvatarResponse(%+v)", *p)
}

var fieldIDToName_UploadAvatarResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetMFAQrcodeRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetMFAQrcodeRequest() *GetMFAQrcodeRequest {
	return &GetMFAQrcodeRequest{}
}

func (p *GetMFAQrcodeRequest) InitDefault() {
}

func (p *GetMFAQrcodeRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetMFAQrcodeRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *GetMFAQrcodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMFAQrcodeRequest(%+v)", *p)
}

var fieldIDToName_GetMFAQrcodeRequest = map[int16]string{
	1: "user_id",
}

type GetMFAQrcodeResponse struct {
	Base *base.BaseResp  `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data *base.MFAQrcode `thrift:"data,2,optional" frugal:"2,optional,base.MFAQrcode" json:"data,omitempty"`
}

func NewGetMFAQrcodeResponse() *GetMFAQrcodeResponse {
	return &GetMFAQrcodeResponse{}
}

func (p *GetMFAQrcodeResponse) InitDefault() {
}

var GetMFAQrcodeResponse_Base_DEFAULT *base.BaseResp

func (p *GetMFAQrcodeResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetMFAQrcodeResponse_Base_DEFAULT
	}
	return p.Base
}

var GetMFAQrcodeResponse_Data_DEFAULT *base.MFAQrcode

func (p *GetMFAQrcodeResponse) GetData() (v *base.MFAQrcode) {
	if !p.IsSetData() {
		return GetMFAQrcodeResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetMFAQrcodeResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetMFAQrcodeResponse) SetData(val *base.MFAQrcode) {
	p.Data = val
}

func (p *GetMFAQrcodeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetMFAQrcodeResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetMFAQrcodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMFAQrcodeResponse(%+v)", *p)
}

var fieldIDToName_GetMFAQrcodeResponse = map[int16]string{
	1: "base",
	2: "data",
}

type MFABindRequest struct {
	Code   string `thrift:"code,1" frugal:"1,default,string" json:"code"`
	Secret string `thrift:"secret,2" frugal:"2,default,string" json:"secret"`
	UserId int64  `thrift:"user_id,3" frugal:"3,default,i64" json:"user_id"`
}

func NewMFABindRequest() *MFABindRequest {
	return &MFABindRequest{}
}

func (p *MFABindRequest) InitDefault() {
}

func (p *MFABindRequest) GetCode() (v string) {
	return p.Code
}

func (p *MFABindRequest) GetSecret() (v string) {
	return p.Secret
}

func (p *MFABindRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *MFABindRequest) SetCode(val string) {
	p.Code = val
}
func (p *MFABindRequest) SetSecret(val string) {
	p.Secret = val
}
func (p *MFABindRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *MFABindRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MFABindRequest(%+v)", *p)
}

var fieldIDToName_MFABindRequest = map[int16]string{
	1: "code",
	2: "secret",
	3: "user_id",
}

type MFABindResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewMFABindResponse() *MFABindResponse {
	return &MFABindResponse{}
}

func (p *MFABindResponse) InitDefault() {
}

var MFABindResponse_Base_DEFAULT *base.BaseResp

func (p *MFABindResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return MFABindResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *MFABindResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *MFABindResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *MFABindResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MFABindResponse(%+v)", *p)
}

var fieldIDToName_MFABindResponse = map[int16]string{
	1: "base",
}

type UserService interface {
	Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)

	Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)

	GetUserInfo(ctx context.Context, req *UserInfoRequest) (r *UserInfoResponse, err error)

	UploadAvatar(ctx context.Context, req *UploadAvatarRequest) (r *UploadAvatarResponse, err error)

	GetMFAQrcode(ctx context.Context, req *GetMFAQrcodeRequest) (r *GetMFAQrcodeResponse, err error)

	MFABind(ctx context.Context, req *MFABindRequest) (r *MFABindResponse, err error)
}

type UserServiceRegisterArgs struct {
	Req *RegisterRequest `thrift:"req,1" frugal:"1,default,RegisterRequest" json:"req"`
}

func NewUserServiceRegisterArgs() *UserServiceRegisterArgs {
	return &UserServiceRegisterArgs{}
}

func (p *UserServiceRegisterArgs) InitDefault() {
}

var UserServiceRegisterArgs_Req_DEFAULT *RegisterRequest

func (p *UserServiceRegisterArgs) GetReq() (v *RegisterRequest) {
	if !p.IsSetReq() {
		return UserServiceRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceRegisterArgs) SetReq(val *RegisterRequest) {
	p.Req = val
}

func (p *UserServiceRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceRegisterResult struct {
	Success *RegisterResponse `thrift:"success,0,optional" frugal:"0,optional,RegisterResponse" json:"success,omitempty"`
}

func NewUserServiceRegisterResult() *UserServiceRegisterResult {
	return &UserServiceRegisterResult{}
}

func (p *UserServiceRegisterResult) InitDefault() {
}

var UserServiceRegisterResult_Success_DEFAULT *RegisterResponse

func (p *UserServiceRegisterResult) GetSuccess() (v *RegisterResponse) {
	if !p.IsSetSuccess() {
		return UserServiceRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResponse)
}

func (p *UserServiceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceRegisterResult(%+v)", *p)
}

var fieldIDToName_UserServiceRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceLoginArgs struct {
	Req *LoginRequest `thrift:"req,1" frugal:"1,default,LoginRequest" json:"req"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
	return &UserServiceLoginArgs{}
}

func (p *UserServiceLoginArgs) InitDefault() {
}

var UserServiceLoginArgs_Req_DEFAULT *LoginRequest

func (p *UserServiceLoginArgs) GetReq() (v *LoginRequest) {
	if !p.IsSetReq() {
		return UserServiceLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceLoginArgs) SetReq(val *LoginRequest) {
	p.Req = val
}

func (p *UserServiceLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

var fieldIDToName_UserServiceLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceLoginResult struct {
	Success *LoginResponse `thrift:"success,0,optional" frugal:"0,optional,LoginResponse" json:"success,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
	return &UserServiceLoginResult{}
}

func (p *UserServiceLoginResult) InitDefault() {
}

var UserServiceLoginResult_Success_DEFAULT *LoginResponse

func (p *UserServiceLoginResult) GetSuccess() (v *LoginResponse) {
	if !p.IsSetSuccess() {
		return UserServiceLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*LoginResponse)
}

func (p *UserServiceLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

var fieldIDToName_UserServiceLoginResult = map[int16]string{
	0: "success",
}

type UserServiceGetUserInfoArgs struct {
	Req *UserInfoRequest `thrift:"req,1" frugal:"1,default,UserInfoRequest" json:"req"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
	return &UserServiceGetUserInfoArgs{}
}

func (p *UserServiceGetUserInfoArgs) InitDefault() {
}

var UserServiceGetUserInfoArgs_Req_DEFAULT *UserInfoRequest

func (p *UserServiceGetUserInfoArgs) GetReq() (v *UserInfoRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserInfoArgs) SetReq(val *UserInfoRequest) {
	p.Req = val
}

func (p *UserServiceGetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserInfoResult struct {
	Success *UserInfoResponse `thrift:"success,0,optional" frugal:"0,optional,UserInfoResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
	return &UserServiceGetUserInfoResult{}
}

func (p *UserServiceGetUserInfoResult) InitDefault() {
}

var UserServiceGetUserInfoResult_Success_DEFAULT *UserInfoResponse

func (p *UserServiceGetUserInfoResult) GetSuccess() (v *UserInfoResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserInfoResponse)
}

func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserInfoResult = map[int16]string{
	0: "success",
}

type UserServiceUploadAvatarArgs struct {
	Req *UploadAvatarRequest `thrift:"req,1" frugal:"1,default,UploadAvatarRequest" json:"req"`
}

func NewUserServiceUploadAvatarArgs() *UserServiceUploadAvatarArgs {
	return &UserServiceUploadAvatarArgs{}
}

func (p *UserServiceUploadAvatarArgs) InitDefault() {
}

var UserServiceUploadAvatarArgs_Req_DEFAULT *UploadAvatarRequest

func (p *UserServiceUploadAvatarArgs) GetReq() (v *UploadAvatarRequest) {
	if !p.IsSetReq() {
		return UserServiceUploadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUploadAvatarArgs) SetReq(val *UploadAvatarRequest) {
	p.Req = val
}

func (p *UserServiceUploadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUploadAvatarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarArgs(%+v)", *p)
}

var fieldIDToName_UserServiceUploadAvatarArgs = map[int16]string{
	1: "req",
}

type UserServiceUploadAvatarResult struct {
	Success *UploadAvatarResponse `thrift:"success,0,optional" frugal:"0,optional,UploadAvatarResponse" json:"success,omitempty"`
}

func NewUserServiceUploadAvatarResult() *UserServiceUploadAvatarResult {
	return &UserServiceUploadAvatarResult{}
}

func (p *UserServiceUploadAvatarResult) InitDefault() {
}

var UserServiceUploadAvatarResult_Success_DEFAULT *UploadAvatarResponse

func (p *UserServiceUploadAvatarResult) GetSuccess() (v *UploadAvatarResponse) {
	if !p.IsSetSuccess() {
		return UserServiceUploadAvatarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUploadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadAvatarResponse)
}

func (p *UserServiceUploadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUploadAvatarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUploadAvatarResult(%+v)", *p)
}

var fieldIDToName_UserServiceUploadAvatarResult = map[int16]string{
	0: "success",
}

type UserServiceGetMFAQrcodeArgs struct {
	Req *GetMFAQrcodeRequest `thrift:"req,1" frugal:"1,default,GetMFAQrcodeRequest" json:"req"`
}

func NewUserServiceGetMFAQrcodeArgs() *UserServiceGetMFAQrcodeArgs {
	return &UserServiceGetMFAQrcodeArgs{}
}

func (p *UserServiceGetMFAQrcodeArgs) InitDefault() {
}

var UserServiceGetMFAQrcodeArgs_Req_DEFAULT *GetMFAQrcodeRequest

func (p *UserServiceGetMFAQrcodeArgs) GetReq() (v *GetMFAQrcodeRequest) {
	if !p.IsSetReq() {
		return UserServiceGetMFAQrcodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetMFAQrcodeArgs) SetReq(val *GetMFAQrcodeRequest) {
	p.Req = val
}

func (p *UserServiceGetMFAQrcodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetMFAQrcodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMFAQrcodeArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetMFAQrcodeArgs = map[int16]string{
	1: "req",
}

type UserServiceGetMFAQrcodeResult struct {
	Success *GetMFAQrcodeResponse `thrift:"success,0,optional" frugal:"0,optional,GetMFAQrcodeResponse" json:"success,omitempty"`
}

func NewUserServiceGetMFAQrcodeResult() *UserServiceGetMFAQrcodeResult {
	return &UserServiceGetMFAQrcodeResult{}
}

func (p *UserServiceGetMFAQrcodeResult) InitDefault() {
}

var UserServiceGetMFAQrcodeResult_Success_DEFAULT *GetMFAQrcodeResponse

func (p *UserServiceGetMFAQrcodeResult) GetSuccess() (v *GetMFAQrcodeResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetMFAQrcodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetMFAQrcodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMFAQrcodeResponse)
}

func (p *UserServiceGetMFAQrcodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetMFAQrcodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetMFAQrcodeResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetMFAQrcodeResult = map[int16]string{
	0: "success",
}

type UserServiceMFABindArgs struct {
	Req *MFABindRequest `thrift:"req,1" frugal:"1,default,MFABindRequest" json:"req"`
}

func NewUserServiceMFABindArgs() *UserServiceMFABindArgs {
	return &UserServiceMFABindArgs{}
}

func (p *UserServiceMFABindArgs) InitDefault() {
}

var UserServiceMFABindArgs_Req_DEFAULT *MFABindRequest

func (p *UserServiceMFABindArgs) GetReq() (v *MFABindRequest) {
	if !p.IsSetReq() {
		return UserServiceMFABindArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceMFABindArgs) SetReq(val *MFABindRequest) {
	p.Req = val
}

func (p *UserServiceMFABindArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceMFABindArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMFABindArgs(%+v)", *p)
}

var fieldIDToName_UserServiceMFABindArgs = map[int16]string{
	1: "req",
}

type UserServiceMFABindResult struct {
	Success *MFABindResponse `thrift:"success,0,optional" frugal:"0,optional,MFABindResponse" json:"success,omitempty"`
}

func NewUserServiceMFABindResult() *UserServiceMFABindResult {
	return &UserServiceMFABindResult{}
}

func (p *UserServiceMFABindResult) InitDefault() {
}

var UserServiceMFABindResult_Success_DEFAULT *MFABindResponse

func (p *UserServiceMFABindResult) GetSuccess() (v *MFABindResponse) {
	if !p.IsSetSuccess() {
		return UserServiceMFABindResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceMFABindResult) SetSuccess(x interface{}) {
	p.Success = x.(*MFABindResponse)
}

func (p *UserServiceMFABindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceMFABindResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceMFABindResult(%+v)", *p)
}

var fieldIDToName_UserServiceMFABindResult = map[int16]string{
	0: "success",
}

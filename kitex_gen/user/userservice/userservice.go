// Code generated by Kitex v0.15.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "github.com/nnieie/golanglab5/kitex_gen/user"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserServiceRegisterArgs,
		newUserServiceRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUserServiceLoginArgs,
		newUserServiceLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newUserServiceGetUserInfoArgs,
		newUserServiceGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadAvatar": kitex.NewMethodInfo(
		uploadAvatarHandler,
		newUserServiceUploadAvatarArgs,
		newUserServiceUploadAvatarResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetMFAQrcode": kitex.NewMethodInfo(
		getMFAQrcodeHandler,
		newUserServiceGetMFAQrcodeArgs,
		newUserServiceGetMFAQrcodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MFABind": kitex.NewMethodInfo(
		mFABindHandler,
		newUserServiceMFABindArgs,
		newUserServiceMFABindResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchUserIdsByName": kitex.NewMethodInfo(
		searchUserIdsByNameHandler,
		newUserServiceSearchUserIdsByNameArgs,
		newUserServiceSearchUserIdsByNameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryUserByID": kitex.NewMethodInfo(
		queryUserByIDHandler,
		newUserServiceQueryUserByIDArgs,
		newUserServiceQueryUserByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"QueryUsersByIDs": kitex.NewMethodInfo(
		queryUsersByIDsHandler,
		newUserServiceQueryUsersByIDsArgs,
		newUserServiceQueryUsersByIDsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLastLogoutTime": kitex.NewMethodInfo(
		getLastLogoutTimeHandler,
		newUserServiceGetLastLogoutTimeArgs,
		newUserServiceGetLastLogoutTimeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateLastLogoutTime": kitex.NewMethodInfo(
		updateLastLogoutTimeHandler,
		newUserServiceUpdateLastLogoutTimeArgs,
		newUserServiceUpdateLastLogoutTimeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterArgs)
	realResult := result.(*user.UserServiceRegisterResult)
	success, err := handler.(user.UserService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterArgs() interface{} {
	return user.NewUserServiceRegisterArgs()
}

func newUserServiceRegisterResult() interface{} {
	return user.NewUserServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginArgs)
	realResult := result.(*user.UserServiceLoginResult)
	success, err := handler.(user.UserService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginArgs() interface{} {
	return user.NewUserServiceLoginArgs()
}

func newUserServiceLoginResult() interface{} {
	return user.NewUserServiceLoginResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetUserInfoArgs)
	realResult := result.(*user.UserServiceGetUserInfoResult)
	success, err := handler.(user.UserService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetUserInfoArgs() interface{} {
	return user.NewUserServiceGetUserInfoArgs()
}

func newUserServiceGetUserInfoResult() interface{} {
	return user.NewUserServiceGetUserInfoResult()
}

func uploadAvatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUploadAvatarArgs)
	realResult := result.(*user.UserServiceUploadAvatarResult)
	success, err := handler.(user.UserService).UploadAvatar(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUploadAvatarArgs() interface{} {
	return user.NewUserServiceUploadAvatarArgs()
}

func newUserServiceUploadAvatarResult() interface{} {
	return user.NewUserServiceUploadAvatarResult()
}

func getMFAQrcodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetMFAQrcodeArgs)
	realResult := result.(*user.UserServiceGetMFAQrcodeResult)
	success, err := handler.(user.UserService).GetMFAQrcode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetMFAQrcodeArgs() interface{} {
	return user.NewUserServiceGetMFAQrcodeArgs()
}

func newUserServiceGetMFAQrcodeResult() interface{} {
	return user.NewUserServiceGetMFAQrcodeResult()
}

func mFABindHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceMFABindArgs)
	realResult := result.(*user.UserServiceMFABindResult)
	success, err := handler.(user.UserService).MFABind(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceMFABindArgs() interface{} {
	return user.NewUserServiceMFABindArgs()
}

func newUserServiceMFABindResult() interface{} {
	return user.NewUserServiceMFABindResult()
}

func searchUserIdsByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceSearchUserIdsByNameArgs)
	realResult := result.(*user.UserServiceSearchUserIdsByNameResult)
	success, err := handler.(user.UserService).SearchUserIdsByName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSearchUserIdsByNameArgs() interface{} {
	return user.NewUserServiceSearchUserIdsByNameArgs()
}

func newUserServiceSearchUserIdsByNameResult() interface{} {
	return user.NewUserServiceSearchUserIdsByNameResult()
}

func queryUserByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceQueryUserByIDArgs)
	realResult := result.(*user.UserServiceQueryUserByIDResult)
	success, err := handler.(user.UserService).QueryUserByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUserByIDArgs() interface{} {
	return user.NewUserServiceQueryUserByIDArgs()
}

func newUserServiceQueryUserByIDResult() interface{} {
	return user.NewUserServiceQueryUserByIDResult()
}

func queryUsersByIDsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceQueryUsersByIDsArgs)
	realResult := result.(*user.UserServiceQueryUsersByIDsResult)
	success, err := handler.(user.UserService).QueryUsersByIDs(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceQueryUsersByIDsArgs() interface{} {
	return user.NewUserServiceQueryUsersByIDsArgs()
}

func newUserServiceQueryUsersByIDsResult() interface{} {
	return user.NewUserServiceQueryUsersByIDsResult()
}

func getLastLogoutTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceGetLastLogoutTimeArgs)
	realResult := result.(*user.UserServiceGetLastLogoutTimeResult)
	success, err := handler.(user.UserService).GetLastLogoutTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetLastLogoutTimeArgs() interface{} {
	return user.NewUserServiceGetLastLogoutTimeArgs()
}

func newUserServiceGetLastLogoutTimeResult() interface{} {
	return user.NewUserServiceGetLastLogoutTimeResult()
}

func updateLastLogoutTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUpdateLastLogoutTimeArgs)
	realResult := result.(*user.UserServiceUpdateLastLogoutTimeResult)
	success, err := handler.(user.UserService).UpdateLastLogoutTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateLastLogoutTimeArgs() interface{} {
	return user.NewUserServiceUpdateLastLogoutTimeArgs()
}

func newUserServiceUpdateLastLogoutTimeResult() interface{} {
	return user.NewUserServiceUpdateLastLogoutTimeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserServiceRegisterArgs
	_args.Req = req
	var _result user.UserServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiceLoginArgs
	_args.Req = req
	var _result user.UserServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *user.UserInfoRequest) (r *user.UserInfoResponse, err error) {
	var _args user.UserServiceGetUserInfoArgs
	_args.Req = req
	var _result user.UserServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadAvatar(ctx context.Context, req *user.UploadAvatarRequest) (r *user.UploadAvatarResponse, err error) {
	var _args user.UserServiceUploadAvatarArgs
	_args.Req = req
	var _result user.UserServiceUploadAvatarResult
	if err = p.c.Call(ctx, "UploadAvatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMFAQrcode(ctx context.Context, req *user.GetMFAQrcodeRequest) (r *user.GetMFAQrcodeResponse, err error) {
	var _args user.UserServiceGetMFAQrcodeArgs
	_args.Req = req
	var _result user.UserServiceGetMFAQrcodeResult
	if err = p.c.Call(ctx, "GetMFAQrcode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MFABind(ctx context.Context, req *user.MFABindRequest) (r *user.MFABindResponse, err error) {
	var _args user.UserServiceMFABindArgs
	_args.Req = req
	var _result user.UserServiceMFABindResult
	if err = p.c.Call(ctx, "MFABind", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchUserIdsByName(ctx context.Context, req *user.SearchUserIdsByNameRequest) (r *user.SearchUserIdsByNameResponse, err error) {
	var _args user.UserServiceSearchUserIdsByNameArgs
	_args.Req = req
	var _result user.UserServiceSearchUserIdsByNameResult
	if err = p.c.Call(ctx, "SearchUserIdsByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserByID(ctx context.Context, req *user.QueryUserByIDRequest) (r *user.QueryUserByIDResponse, err error) {
	var _args user.UserServiceQueryUserByIDArgs
	_args.Req = req
	var _result user.UserServiceQueryUserByIDResult
	if err = p.c.Call(ctx, "QueryUserByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUsersByIDs(ctx context.Context, req *user.QueryUsersByIDsRequest) (r *user.QueryUsersByIDsResponse, err error) {
	var _args user.UserServiceQueryUsersByIDsArgs
	_args.Req = req
	var _result user.UserServiceQueryUsersByIDsResult
	if err = p.c.Call(ctx, "QueryUsersByIDs", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLastLogoutTime(ctx context.Context, req *user.GetLastLogoutTimeRequest) (r *user.GetLastLogoutTimeResponse, err error) {
	var _args user.UserServiceGetLastLogoutTimeArgs
	_args.Req = req
	var _result user.UserServiceGetLastLogoutTimeResult
	if err = p.c.Call(ctx, "GetLastLogoutTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLastLogoutTime(ctx context.Context, req *user.UpdateLastLogoutTimeRequest) (r *user.UpdateLastLogoutTimeResponse, err error) {
	var _args user.UserServiceUpdateLastLogoutTimeArgs
	_args.Req = req
	var _result user.UserServiceUpdateLastLogoutTimeResult
	if err = p.c.Call(ctx, "UpdateLastLogoutTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

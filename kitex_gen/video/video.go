// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package video

import (
	"context"
	"fmt"
	"github.com/nnieie/golanglab5/kitex_gen/base"
)

type PublishRequest struct {
	Title       string `thrift:"title,1" frugal:"1,default,string" json:"title"`
	Description string `thrift:"description,2" frugal:"2,default,string" json:"description"`
	Video       []byte `thrift:"video,3" frugal:"3,default,binary" json:"video"`
	Cover       []byte `thrift:"cover,4" frugal:"4,default,binary" json:"cover"`
	UserId      int64  `thrift:"user_id,5" frugal:"5,default,i64" json:"user_id"`
}

func NewPublishRequest() *PublishRequest {
	return &PublishRequest{}
}

func (p *PublishRequest) InitDefault() {
}

func (p *PublishRequest) GetTitle() (v string) {
	return p.Title
}

func (p *PublishRequest) GetDescription() (v string) {
	return p.Description
}

func (p *PublishRequest) GetVideo() (v []byte) {
	return p.Video
}

func (p *PublishRequest) GetCover() (v []byte) {
	return p.Cover
}

func (p *PublishRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *PublishRequest) SetTitle(val string) {
	p.Title = val
}
func (p *PublishRequest) SetDescription(val string) {
	p.Description = val
}
func (p *PublishRequest) SetVideo(val []byte) {
	p.Video = val
}
func (p *PublishRequest) SetCover(val []byte) {
	p.Cover = val
}
func (p *PublishRequest) SetUserId(val int64) {
	p.UserId = val
}

func (p *PublishRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishRequest(%+v)", *p)
}

var fieldIDToName_PublishRequest = map[int16]string{
	1: "title",
	2: "description",
	3: "video",
	4: "cover",
	5: "user_id",
}

type PublishResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
}

func NewPublishResponse() *PublishResponse {
	return &PublishResponse{}
}

func (p *PublishResponse) InitDefault() {
}

var PublishResponse_Base_DEFAULT *base.BaseResp

func (p *PublishResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return PublishResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *PublishResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}

func (p *PublishResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PublishResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublishResponse(%+v)", *p)
}

var fieldIDToName_PublishResponse = map[int16]string{
	1: "base",
}

type GetPublishListRequest struct {
	UserId   string `thrift:"user_id,1" frugal:"1,default,string" json:"user_id"`
	PageSize int64  `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
	PageNum  int64  `thrift:"page_num,3" frugal:"3,default,i64" json:"page_num"`
}

func NewGetPublishListRequest() *GetPublishListRequest {
	return &GetPublishListRequest{}
}

func (p *GetPublishListRequest) InitDefault() {
}

func (p *GetPublishListRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *GetPublishListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *GetPublishListRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *GetPublishListRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *GetPublishListRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *GetPublishListRequest) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *GetPublishListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublishListRequest(%+v)", *p)
}

var fieldIDToName_GetPublishListRequest = map[int16]string{
	1: "user_id",
	2: "page_size",
	3: "page_num",
}

type GetPublishListResponse struct {
	Base  *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data  []*base.Video  `thrift:"data,2,optional" frugal:"2,optional,list<base.Video>" json:"data,omitempty"`
	Total *int64         `thrift:"total,3,optional" frugal:"3,optional,i64" json:"total,omitempty"`
}

func NewGetPublishListResponse() *GetPublishListResponse {
	return &GetPublishListResponse{}
}

func (p *GetPublishListResponse) InitDefault() {
}

var GetPublishListResponse_Base_DEFAULT *base.BaseResp

func (p *GetPublishListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetPublishListResponse_Base_DEFAULT
	}
	return p.Base
}

var GetPublishListResponse_Data_DEFAULT []*base.Video

func (p *GetPublishListResponse) GetData() (v []*base.Video) {
	if !p.IsSetData() {
		return GetPublishListResponse_Data_DEFAULT
	}
	return p.Data
}

var GetPublishListResponse_Total_DEFAULT int64

func (p *GetPublishListResponse) GetTotal() (v int64) {
	if !p.IsSetTotal() {
		return GetPublishListResponse_Total_DEFAULT
	}
	return *p.Total
}
func (p *GetPublishListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetPublishListResponse) SetData(val []*base.Video) {
	p.Data = val
}
func (p *GetPublishListResponse) SetTotal(val *int64) {
	p.Total = val
}

func (p *GetPublishListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPublishListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetPublishListResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetPublishListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPublishListResponse(%+v)", *p)
}

var fieldIDToName_GetPublishListResponse = map[int16]string{
	1: "base",
	2: "data",
	3: "total",
}

type SearchVideoRequest struct {
	Keyword  string  `thrift:"keyword,1" frugal:"1,default,string" json:"keyword"`
	PageNum  int64   `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64   `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
	FromDate *int64  `thrift:"from_date,4,optional" frugal:"4,optional,i64" json:"from_date,omitempty"`
	ToDate   *int64  `thrift:"to_date,5,optional" frugal:"5,optional,i64" json:"to_date,omitempty"`
	Username *string `thrift:"username,6,optional" frugal:"6,optional,string" json:"username,omitempty"`
}

func NewSearchVideoRequest() *SearchVideoRequest {
	return &SearchVideoRequest{}
}

func (p *SearchVideoRequest) InitDefault() {
}

func (p *SearchVideoRequest) GetKeyword() (v string) {
	return p.Keyword
}

func (p *SearchVideoRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *SearchVideoRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var SearchVideoRequest_FromDate_DEFAULT int64

func (p *SearchVideoRequest) GetFromDate() (v int64) {
	if !p.IsSetFromDate() {
		return SearchVideoRequest_FromDate_DEFAULT
	}
	return *p.FromDate
}

var SearchVideoRequest_ToDate_DEFAULT int64

func (p *SearchVideoRequest) GetToDate() (v int64) {
	if !p.IsSetToDate() {
		return SearchVideoRequest_ToDate_DEFAULT
	}
	return *p.ToDate
}

var SearchVideoRequest_Username_DEFAULT string

func (p *SearchVideoRequest) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return SearchVideoRequest_Username_DEFAULT
	}
	return *p.Username
}
func (p *SearchVideoRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *SearchVideoRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *SearchVideoRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *SearchVideoRequest) SetFromDate(val *int64) {
	p.FromDate = val
}
func (p *SearchVideoRequest) SetToDate(val *int64) {
	p.ToDate = val
}
func (p *SearchVideoRequest) SetUsername(val *string) {
	p.Username = val
}

func (p *SearchVideoRequest) IsSetFromDate() bool {
	return p.FromDate != nil
}

func (p *SearchVideoRequest) IsSetToDate() bool {
	return p.ToDate != nil
}

func (p *SearchVideoRequest) IsSetUsername() bool {
	return p.Username != nil
}

func (p *SearchVideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchVideoRequest(%+v)", *p)
}

var fieldIDToName_SearchVideoRequest = map[int16]string{
	1: "keyword",
	2: "page_num",
	3: "page_size",
	4: "from_date",
	5: "to_date",
	6: "username",
}

type SearchVideoResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Video  `thrift:"data,2,optional" frugal:"2,optional,list<base.Video>" json:"data,omitempty"`
}

func NewSearchVideoResponse() *SearchVideoResponse {
	return &SearchVideoResponse{}
}

func (p *SearchVideoResponse) InitDefault() {
}

var SearchVideoResponse_Base_DEFAULT *base.BaseResp

func (p *SearchVideoResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return SearchVideoResponse_Base_DEFAULT
	}
	return p.Base
}

var SearchVideoResponse_Data_DEFAULT []*base.Video

func (p *SearchVideoResponse) GetData() (v []*base.Video) {
	if !p.IsSetData() {
		return SearchVideoResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *SearchVideoResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *SearchVideoResponse) SetData(val []*base.Video) {
	p.Data = val
}

func (p *SearchVideoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchVideoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *SearchVideoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchVideoResponse(%+v)", *p)
}

var fieldIDToName_SearchVideoResponse = map[int16]string{
	1: "base",
	2: "data",
}

type GetPopularVideoListRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewGetPopularVideoListRequest() *GetPopularVideoListRequest {
	return &GetPopularVideoListRequest{}
}

func (p *GetPopularVideoListRequest) InitDefault() {
}

func (p *GetPopularVideoListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *GetPopularVideoListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *GetPopularVideoListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *GetPopularVideoListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *GetPopularVideoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularVideoListRequest(%+v)", *p)
}

var fieldIDToName_GetPopularVideoListRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type GetPopularVideoListResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Video  `thrift:"data,2,optional" frugal:"2,optional,list<base.Video>" json:"data,omitempty"`
}

func NewGetPopularVideoListResponse() *GetPopularVideoListResponse {
	return &GetPopularVideoListResponse{}
}

func (p *GetPopularVideoListResponse) InitDefault() {
}

var GetPopularVideoListResponse_Base_DEFAULT *base.BaseResp

func (p *GetPopularVideoListResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return GetPopularVideoListResponse_Base_DEFAULT
	}
	return p.Base
}

var GetPopularVideoListResponse_Data_DEFAULT []*base.Video

func (p *GetPopularVideoListResponse) GetData() (v []*base.Video) {
	if !p.IsSetData() {
		return GetPopularVideoListResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetPopularVideoListResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *GetPopularVideoListResponse) SetData(val []*base.Video) {
	p.Data = val
}

func (p *GetPopularVideoListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPopularVideoListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetPopularVideoListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPopularVideoListResponse(%+v)", *p)
}

var fieldIDToName_GetPopularVideoListResponse = map[int16]string{
	1: "base",
	2: "data",
}

type VideoStreamRequest struct {
	LatestTime *int64 `thrift:"latest_time,1,optional" frugal:"1,optional,i64" json:"latest_time,omitempty"`
}

func NewVideoStreamRequest() *VideoStreamRequest {
	return &VideoStreamRequest{}
}

func (p *VideoStreamRequest) InitDefault() {
}

var VideoStreamRequest_LatestTime_DEFAULT int64

func (p *VideoStreamRequest) GetLatestTime() (v int64) {
	if !p.IsSetLatestTime() {
		return VideoStreamRequest_LatestTime_DEFAULT
	}
	return *p.LatestTime
}
func (p *VideoStreamRequest) SetLatestTime(val *int64) {
	p.LatestTime = val
}

func (p *VideoStreamRequest) IsSetLatestTime() bool {
	return p.LatestTime != nil
}

func (p *VideoStreamRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStreamRequest(%+v)", *p)
}

var fieldIDToName_VideoStreamRequest = map[int16]string{
	1: "latest_time",
}

type VideoStreamResponse struct {
	Base *base.BaseResp `thrift:"base,1" frugal:"1,default,base.BaseResp" json:"base"`
	Data []*base.Video  `thrift:"data,2,optional" frugal:"2,optional,list<base.Video>" json:"data,omitempty"`
}

func NewVideoStreamResponse() *VideoStreamResponse {
	return &VideoStreamResponse{}
}

func (p *VideoStreamResponse) InitDefault() {
}

var VideoStreamResponse_Base_DEFAULT *base.BaseResp

func (p *VideoStreamResponse) GetBase() (v *base.BaseResp) {
	if !p.IsSetBase() {
		return VideoStreamResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoStreamResponse_Data_DEFAULT []*base.Video

func (p *VideoStreamResponse) GetData() (v []*base.Video) {
	if !p.IsSetData() {
		return VideoStreamResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoStreamResponse) SetBase(val *base.BaseResp) {
	p.Base = val
}
func (p *VideoStreamResponse) SetData(val []*base.Video) {
	p.Data = val
}

func (p *VideoStreamResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoStreamResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoStreamResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStreamResponse(%+v)", *p)
}

var fieldIDToName_VideoStreamResponse = map[int16]string{
	1: "base",
	2: "data",
}

type VideoService interface {
	PublishVideo(ctx context.Context, req *PublishRequest) (r *PublishResponse, err error)

	GetPublishList(ctx context.Context, req *GetPublishListRequest) (r *GetPublishListResponse, err error)

	SearchVideo(ctx context.Context, req *SearchVideoRequest) (r *SearchVideoResponse, err error)

	GetPopularVideo(ctx context.Context, req *GetPopularVideoListRequest) (r *GetPopularVideoListResponse, err error)

	GetVideoStream(ctx context.Context, req *VideoStreamRequest) (r *VideoStreamResponse, err error)
}

type VideoServicePublishVideoArgs struct {
	Req *PublishRequest `thrift:"req,1" frugal:"1,default,PublishRequest" json:"req"`
}

func NewVideoServicePublishVideoArgs() *VideoServicePublishVideoArgs {
	return &VideoServicePublishVideoArgs{}
}

func (p *VideoServicePublishVideoArgs) InitDefault() {
}

var VideoServicePublishVideoArgs_Req_DEFAULT *PublishRequest

func (p *VideoServicePublishVideoArgs) GetReq() (v *PublishRequest) {
	if !p.IsSetReq() {
		return VideoServicePublishVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServicePublishVideoArgs) SetReq(val *PublishRequest) {
	p.Req = val
}

func (p *VideoServicePublishVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServicePublishVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePublishVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServicePublishVideoArgs = map[int16]string{
	1: "req",
}

type VideoServicePublishVideoResult struct {
	Success *PublishResponse `thrift:"success,0,optional" frugal:"0,optional,PublishResponse" json:"success,omitempty"`
}

func NewVideoServicePublishVideoResult() *VideoServicePublishVideoResult {
	return &VideoServicePublishVideoResult{}
}

func (p *VideoServicePublishVideoResult) InitDefault() {
}

var VideoServicePublishVideoResult_Success_DEFAULT *PublishResponse

func (p *VideoServicePublishVideoResult) GetSuccess() (v *PublishResponse) {
	if !p.IsSetSuccess() {
		return VideoServicePublishVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServicePublishVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*PublishResponse)
}

func (p *VideoServicePublishVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServicePublishVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePublishVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServicePublishVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceGetPublishListArgs struct {
	Req *GetPublishListRequest `thrift:"req,1" frugal:"1,default,GetPublishListRequest" json:"req"`
}

func NewVideoServiceGetPublishListArgs() *VideoServiceGetPublishListArgs {
	return &VideoServiceGetPublishListArgs{}
}

func (p *VideoServiceGetPublishListArgs) InitDefault() {
}

var VideoServiceGetPublishListArgs_Req_DEFAULT *GetPublishListRequest

func (p *VideoServiceGetPublishListArgs) GetReq() (v *GetPublishListRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetPublishListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetPublishListArgs) SetReq(val *GetPublishListRequest) {
	p.Req = val
}

func (p *VideoServiceGetPublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetPublishListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetPublishListArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetPublishListArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetPublishListResult struct {
	Success *GetPublishListResponse `thrift:"success,0,optional" frugal:"0,optional,GetPublishListResponse" json:"success,omitempty"`
}

func NewVideoServiceGetPublishListResult() *VideoServiceGetPublishListResult {
	return &VideoServiceGetPublishListResult{}
}

func (p *VideoServiceGetPublishListResult) InitDefault() {
}

var VideoServiceGetPublishListResult_Success_DEFAULT *GetPublishListResponse

func (p *VideoServiceGetPublishListResult) GetSuccess() (v *GetPublishListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetPublishListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetPublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPublishListResponse)
}

func (p *VideoServiceGetPublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetPublishListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetPublishListResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetPublishListResult = map[int16]string{
	0: "success",
}

type VideoServiceSearchVideoArgs struct {
	Req *SearchVideoRequest `thrift:"req,1" frugal:"1,default,SearchVideoRequest" json:"req"`
}

func NewVideoServiceSearchVideoArgs() *VideoServiceSearchVideoArgs {
	return &VideoServiceSearchVideoArgs{}
}

func (p *VideoServiceSearchVideoArgs) InitDefault() {
}

var VideoServiceSearchVideoArgs_Req_DEFAULT *SearchVideoRequest

func (p *VideoServiceSearchVideoArgs) GetReq() (v *SearchVideoRequest) {
	if !p.IsSetReq() {
		return VideoServiceSearchVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceSearchVideoArgs) SetReq(val *SearchVideoRequest) {
	p.Req = val
}

func (p *VideoServiceSearchVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceSearchVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceSearchVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceSearchVideoResult struct {
	Success *SearchVideoResponse `thrift:"success,0,optional" frugal:"0,optional,SearchVideoResponse" json:"success,omitempty"`
}

func NewVideoServiceSearchVideoResult() *VideoServiceSearchVideoResult {
	return &VideoServiceSearchVideoResult{}
}

func (p *VideoServiceSearchVideoResult) InitDefault() {
}

var VideoServiceSearchVideoResult_Success_DEFAULT *SearchVideoResponse

func (p *VideoServiceSearchVideoResult) GetSuccess() (v *SearchVideoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSearchVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSearchVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchVideoResponse)
}

func (p *VideoServiceSearchVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSearchVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceSearchVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceGetPopularVideoArgs struct {
	Req *GetPopularVideoListRequest `thrift:"req,1" frugal:"1,default,GetPopularVideoListRequest" json:"req"`
}

func NewVideoServiceGetPopularVideoArgs() *VideoServiceGetPopularVideoArgs {
	return &VideoServiceGetPopularVideoArgs{}
}

func (p *VideoServiceGetPopularVideoArgs) InitDefault() {
}

var VideoServiceGetPopularVideoArgs_Req_DEFAULT *GetPopularVideoListRequest

func (p *VideoServiceGetPopularVideoArgs) GetReq() (v *GetPopularVideoListRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetPopularVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetPopularVideoArgs) SetReq(val *GetPopularVideoListRequest) {
	p.Req = val
}

func (p *VideoServiceGetPopularVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetPopularVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetPopularVideoArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetPopularVideoArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetPopularVideoResult struct {
	Success *GetPopularVideoListResponse `thrift:"success,0,optional" frugal:"0,optional,GetPopularVideoListResponse" json:"success,omitempty"`
}

func NewVideoServiceGetPopularVideoResult() *VideoServiceGetPopularVideoResult {
	return &VideoServiceGetPopularVideoResult{}
}

func (p *VideoServiceGetPopularVideoResult) InitDefault() {
}

var VideoServiceGetPopularVideoResult_Success_DEFAULT *GetPopularVideoListResponse

func (p *VideoServiceGetPopularVideoResult) GetSuccess() (v *GetPopularVideoListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetPopularVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetPopularVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPopularVideoListResponse)
}

func (p *VideoServiceGetPopularVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetPopularVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetPopularVideoResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetPopularVideoResult = map[int16]string{
	0: "success",
}

type VideoServiceGetVideoStreamArgs struct {
	Req *VideoStreamRequest `thrift:"req,1" frugal:"1,default,VideoStreamRequest" json:"req"`
}

func NewVideoServiceGetVideoStreamArgs() *VideoServiceGetVideoStreamArgs {
	return &VideoServiceGetVideoStreamArgs{}
}

func (p *VideoServiceGetVideoStreamArgs) InitDefault() {
}

var VideoServiceGetVideoStreamArgs_Req_DEFAULT *VideoStreamRequest

func (p *VideoServiceGetVideoStreamArgs) GetReq() (v *VideoStreamRequest) {
	if !p.IsSetReq() {
		return VideoServiceGetVideoStreamArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceGetVideoStreamArgs) SetReq(val *VideoStreamRequest) {
	p.Req = val
}

func (p *VideoServiceGetVideoStreamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceGetVideoStreamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoStreamArgs(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoStreamArgs = map[int16]string{
	1: "req",
}

type VideoServiceGetVideoStreamResult struct {
	Success *VideoStreamResponse `thrift:"success,0,optional" frugal:"0,optional,VideoStreamResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoStreamResult() *VideoServiceGetVideoStreamResult {
	return &VideoServiceGetVideoStreamResult{}
}

func (p *VideoServiceGetVideoStreamResult) InitDefault() {
}

var VideoServiceGetVideoStreamResult_Success_DEFAULT *VideoStreamResponse

func (p *VideoServiceGetVideoStreamResult) GetSuccess() (v *VideoStreamResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoStreamResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoStreamResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoStreamResponse)
}

func (p *VideoServiceGetVideoStreamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoStreamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoStreamResult(%+v)", *p)
}

var fieldIDToName_VideoServiceGetVideoStreamResult = map[int16]string{
	0: "success",
}

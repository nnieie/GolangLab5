// Code generated by Kitex v0.15.1. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "github.com/nnieie/golanglab5/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PublishVideo(ctx context.Context, req *video.PublishRequest, callOptions ...callopt.Option) (r *video.PublishResponse, err error)
	GetPublishList(ctx context.Context, req *video.GetPublishListRequest, callOptions ...callopt.Option) (r *video.GetPublishListResponse, err error)
	SearchVideo(ctx context.Context, req *video.SearchVideoRequest, callOptions ...callopt.Option) (r *video.SearchVideoResponse, err error)
	GetPopularVideo(ctx context.Context, req *video.GetPopularVideoListRequest, callOptions ...callopt.Option) (r *video.GetPopularVideoListResponse, err error)
	GetVideoStream(ctx context.Context, req *video.VideoStreamRequest, callOptions ...callopt.Option) (r *video.VideoStreamResponse, err error)
	QueryVideoByID(ctx context.Context, req *video.QueryVideoByIDRequest, callOptions ...callopt.Option) (r *video.QueryVideoByIDResponse, err error)
	QueryVideosByIDs(ctx context.Context, req *video.QueryVideosByIDsRequest, callOptions ...callopt.Option) (r *video.QueryVideosByIDsResponse, err error)
	GetVideoLikeCount(ctx context.Context, req *video.GetVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.GetVideoLikeCountResponse, err error)
	SetVideoLikeCount(ctx context.Context, req *video.SetVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.SetVideoLikeCountResponse, err error)
	UpdateVideoLikeCount(ctx context.Context, req *video.UpdateVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.UpdateVideoLikeCountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) PublishVideo(ctx context.Context, req *video.PublishRequest, callOptions ...callopt.Option) (r *video.PublishResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kVideoServiceClient) GetPublishList(ctx context.Context, req *video.GetPublishListRequest, callOptions ...callopt.Option) (r *video.GetPublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, req)
}

func (p *kVideoServiceClient) SearchVideo(ctx context.Context, req *video.SearchVideoRequest, callOptions ...callopt.Option) (r *video.SearchVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchVideo(ctx, req)
}

func (p *kVideoServiceClient) GetPopularVideo(ctx context.Context, req *video.GetPopularVideoListRequest, callOptions ...callopt.Option) (r *video.GetPopularVideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPopularVideo(ctx, req)
}

func (p *kVideoServiceClient) GetVideoStream(ctx context.Context, req *video.VideoStreamRequest, callOptions ...callopt.Option) (r *video.VideoStreamResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoStream(ctx, req)
}

func (p *kVideoServiceClient) QueryVideoByID(ctx context.Context, req *video.QueryVideoByIDRequest, callOptions ...callopt.Option) (r *video.QueryVideoByIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryVideoByID(ctx, req)
}

func (p *kVideoServiceClient) QueryVideosByIDs(ctx context.Context, req *video.QueryVideosByIDsRequest, callOptions ...callopt.Option) (r *video.QueryVideosByIDsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryVideosByIDs(ctx, req)
}

func (p *kVideoServiceClient) GetVideoLikeCount(ctx context.Context, req *video.GetVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.GetVideoLikeCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoLikeCount(ctx, req)
}

func (p *kVideoServiceClient) SetVideoLikeCount(ctx context.Context, req *video.SetVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.SetVideoLikeCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SetVideoLikeCount(ctx, req)
}

func (p *kVideoServiceClient) UpdateVideoLikeCount(ctx context.Context, req *video.UpdateVideoLikeCountRequest, callOptions ...callopt.Option) (r *video.UpdateVideoLikeCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVideoLikeCount(ctx, req)
}
